<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LuoRongLuoRong</title>
  
  <subtitle>博客</subtitle>
  <link href="https://luorongluorong.github.io/atom.xml" rel="self"/>
  
  <link href="https://luorongluorong.github.io/"/>
  <updated>2023-04-07T03:34:49.502Z</updated>
  <id>https://luorongluorong.github.io/</id>
  
  <author>
    <name>LuoRongLuoRong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用 pdb 进行命令行调试</title>
    <link href="https://luorongluorong.github.io/2023/04/07/bases/py_pdb/"/>
    <id>https://luorongluorong.github.io/2023/04/07/bases/py_pdb/</id>
    <published>2023-04-07T02:19:48.000Z</published>
    <updated>2023-04-07T03:34:49.502Z</updated>
    
    <content type="html"><![CDATA[<p>Python 的 pdb 模块是一个可交互的源代码调试器，支持源代码级别的断点和单步调试。</p><h1 id="Python-进入-pdb-调试模式的两种方式"><a href="#Python-进入-pdb-调试模式的两种方式" class="headerlink" title="Python 进入 pdb 调试模式的两种方式"></a>Python 进入 pdb 调试模式的两种方式</h1><h2 id="1-直接在命令行参数指定使用-pdb-模块启动-Python-文件"><a href="#1-直接在命令行参数指定使用-pdb-模块启动-Python-文件" class="headerlink" title="1. 直接在命令行参数指定使用 pdb 模块启动 Python 文件"></a>1. 直接在命令行参数指定使用 pdb 模块启动 Python 文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pdb myscript.py</span><br></pre></td></tr></table></figure><h2 id="2-在程序代码中设置断点"><a href="#2-在程序代码中设置断点" class="headerlink" title="2. 在程序代码中设置断点"></a>2. 在程序代码中设置断点</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先需要在程序中使用如下语句导入 pdb 模块:</span></span><br><span class="line"><span class="keyword">import</span> pdb</span><br><span class="line"><span class="comment"># 然后再在需要设置断点的地方放置如下断点设置代码:</span></span><br><span class="line">pdb.set_trace()</span><br></pre></td></tr></table></figure><h1 id="pdb-的常用命令-commands"><a href="#pdb-的常用命令-commands" class="headerlink" title="pdb 的常用命令(commands)"></a>pdb 的常用命令(commands)</h1><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><div class="table-container"><table><thead><tr><th>命令</th><th>用途</th></tr></thead><tbody><tr><td>h(elp) [command]</td><td>有参数则打印 command，没参数则打印所有可用的 commands。<code>help pdb</code> 打印 pdb 模块的文档。</td></tr><tr><td>w(here)</td><td>打印堆栈信息，最新的帧在最底部。箭头表示当前帧。</td></tr><tr><td>b(reak)</td><td>查看断点及其编号。</td></tr><tr><td>b(reak) lineno</td><td>在 lineno 行打一个断点</td></tr><tr><td>tbreak</td><td>temporary break point，一个临时的断点，只断一次。</td></tr><tr><td>cl(ear) lineno</td><td>清除该行的断点。</td></tr><tr><td>cl(ear) lineno1 lineno2 lineno3</td><td>清除该几行的断点。</td></tr><tr><td>cl(ear)</td><td>清楚全部断点。</td></tr><tr><td>n(ext)</td><td>执行下一行（不会进入函数体）</td></tr><tr><td>s(tep)</td><td>执行下一行（能够进入函数体）</td></tr><tr><td>r(eturn)</td><td>执行下一行（在函数中时会直接执行到函数返回处）</td></tr><tr><td>c(ont(inue))</td><td>继续运行到下一个断点。</td></tr><tr><td>unt(il) [lineno]</td><td>持续执行直到运行到指定行（或遇到断点）。</td></tr><tr><td>l(ist) [first[, last]]</td><td>打印当前文件的源代码。</td></tr><tr><td>ll or longlist</td><td>打印当前 function 或 frame 的所有的源代码。</td></tr><tr><td>p expression</td><td>打印 expression 的值。</td></tr><tr><td>pp expression</td><td>打印 expression，但是 pretty-printed。</td></tr><tr><td>whatis expression</td><td>打印 expression 的 type。</td></tr><tr><td>q(uit)</td><td>中止并退出调试。</td></tr></tbody></table></div><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><div class="table-container"><table><thead><tr><th>命令</th><th>用途</th></tr></thead><tbody><tr><td>dir()</td><td>打印出一个变量的列表。</td></tr><tr><td>locals() or vars()</td><td>打印出当前作用域中的所有变量，包括 Python 解释器自动创建的内部变量和模块级别的变量。</td></tr></tbody></table></div><p>如果使用 locals() 函数的话，需要过滤器 <code>print(&#123;k:v for k,v in locals().items() if k in (&#39;x&#39;, &#39;y&#39;)&#125;)</code>。</p><h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><p>代码如下：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># from https://www.runoob.com/python3/python3-class.html</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 类定义</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">people</span>:</span><br><span class="line">    <span class="comment">#定义基本属性</span></span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    age = <span class="number">0</span></span><br><span class="line">    <span class="comment">#定义私有属性,私有属性在类外部无法直接进行访问</span></span><br><span class="line">    __weight = <span class="number">0</span></span><br><span class="line">    <span class="comment">#定义构造方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,n,a,w</span>):</span><br><span class="line">        self.name = n</span><br><span class="line">        self.age = a</span><br><span class="line">        self.__weight = w</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 说: 我 %d 岁。&quot;</span> %(self.name,self.age))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 实例化类</span></span><br><span class="line">p = people(<span class="string">&#x27;runoob&#x27;</span>,<span class="number">10</span>,<span class="number">30</span>)</span><br><span class="line">p.speak()</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>简单调试过程如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ python -m pdb myscript.py</span><br><span class="line">&gt; /home/fdse/luorong/learn/test/myscript.py(6)&lt;module&gt;()</span><br><span class="line">-&gt; class people:</span><br><span class="line"></span><br><span class="line">(Pdb) n</span><br><span class="line">&gt; /home/fdse/luorong/learn/test/myscript.py(21)&lt;module&gt;()</span><br><span class="line">-&gt; p = people(<span class="string">&#x27;runoob&#x27;</span>,10,30)</span><br><span class="line"></span><br><span class="line">(Pdb) n</span><br><span class="line">&gt; /home/fdse/luorong/learn/test/myscript.py(22)&lt;module&gt;()</span><br><span class="line">-&gt; p.speak()</span><br><span class="line"></span><br><span class="line">(Pdb) <span class="built_in">dir</span>()</span><br><span class="line">[<span class="string">&#x27;__builtins__&#x27;</span>, <span class="string">&#x27;__file__&#x27;</span>, <span class="string">&#x27;__name__&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;people&#x27;</span>]</span><br><span class="line"></span><br><span class="line">(Pdb) b 22</span><br><span class="line">Breakpoint 2 at /home/fdse/luorong/learn/test/myscript.py:22</span><br><span class="line"></span><br><span class="line">(Pdb) b</span><br><span class="line">Num Type         Disp Enb   Where</span><br><span class="line">1   breakpoint   keep <span class="built_in">yes</span>   at /home/fdse/luorong/learn/test/myscript.py:22</span><br><span class="line"></span><br><span class="line">(Pdb) whatis p</span><br><span class="line">&lt;class <span class="string">&#x27;__main__.people&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><p>在 PDB 中，使用 <code>b</code> 命令后显示的参数：</p><ul><li>disp 用于控制是否显示当前断点的信息。</li><li>enb 和 dis 用于启用和禁用断点。</li><li>num 用于显示断点的编号。</li><li>where 用于显示当前程序的调用堆栈。</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://docs.python.org/3/library/pdb.html">pdb — The Python Debugger</a></li><li><a href="https://blog.csdn.net/tuzixini/article/details/79614655">pdb用法-Python 命令行调试工具</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Python 的 pdb 模块是一个可交互的源代码调试器，支持源代码级别的断点和单步调试。&lt;/p&gt;
&lt;h1 id=&quot;Python-进入-pdb-调试模式的两种方式&quot;&gt;&lt;a href=&quot;#Python-进入-pdb-调试模式的两种方式&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="技术" scheme="https://luorongluorong.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="pdb" scheme="https://luorongluorong.github.io/tags/pdb/"/>
    
    <category term="Python" scheme="https://luorongluorong.github.io/tags/Python/"/>
    
    <category term="调试" scheme="https://luorongluorong.github.io/tags/%E8%B0%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>乘法逆元与快速幂</title>
    <link href="https://luorongluorong.github.io/2023/04/02/problems/multiplicative_inverse_modulo/"/>
    <id>https://luorongluorong.github.io/2023/04/02/problems/multiplicative_inverse_modulo/</id>
    <published>2023-04-02T03:57:15.000Z</published>
    <updated>2023-04-13T09:13:13.556Z</updated>
    
    <content type="html"><![CDATA[<p>在算法题中，有一种题型：计算排列组合数，并使用乘法逆元实现对结果的取模运算。</p><p>由于计算机的编码方式，形如 (a * b) % base 这样的运算，乘法的结果可能导致溢出，我们希望找到一种技巧，能够化简这种表达式，避免溢出同时得到结果。</p><p>实际上，<strong>乘法逆元</strong>是应用在<strong>除法求模</strong>上的。因为加法、减法和乘法的求模都比较简单，但是乘法的取模容易造成溢出。</p><h1 id="乘法逆元介绍"><a href="#乘法逆元介绍" class="headerlink" title="乘法逆元介绍"></a>乘法逆元介绍</h1><p>a 的逆元 是 $a^{(p-2)}$。</p><p>注意：乘法逆元不一定是存在的。a 存在乘法逆元的充要条件是 a 与模数 p 互质。当模数 p 为质数时，$a^{(p-2)}$ 即为 a 的乘法逆元。</p><p>当我们要计算一大串连续的阶乘的逆元时，采用费马小定理或扩展欧几里得算法就有可能超时，所以我们必须采用一个更快的算法。</p><p><img src="/static/problems/math_mod.png" alt="Alt text"></p><p>from <a href="https://blog.csdn.net/qq_46527915/article/details/117375648">乘法逆元通俗易懂的理解方法</a></p><p>从上图可以看出，除法的取模是不满足分配律的。</p><p>所以 <code>(b * a) mod p</code> 等价于 <code>(b / a 的乘法逆元) mod p</code>。</p><p>这样就可以把 <code>乘法</code> 转换为 <code>除法</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 乘法逆元模板</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MOD</span> <span class="operator">=</span> (<span class="type">int</span>) <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">mod</span><span class="params">(<span class="type">long</span> numerator, <span class="type">long</span> denominator)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">int</span>) (numerator * quickPow(denominator, MOD - <span class="number">2</span>) % MOD);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">long</span> <span class="title function_">quickPow</span><span class="params">(<span class="type">long</span> x, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">for</span> (; n &gt; <span class="number">0</span>; n /= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> &gt; <span class="number">0</span>) </span><br><span class="line">            res = res * x % MOD;</span><br><span class="line">        x = x * x % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="快速幂函数"><a href="#快速幂函数" class="headerlink" title="快速幂函数"></a>快速幂函数</h1><p>快速幂通过每次将 n 除以 2，使得时间复杂度为达到 O(log n)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">long</span> <span class="title function_">pow</span><span class="params">(<span class="type">long</span> x, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">var</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">for</span> (; n &gt; <span class="number">0</span>; n /= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> &gt; <span class="number">0</span>) res = res * x % MOD;</span><br><span class="line">        x = x * x % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="2514-统计同位异构字符串数目"><a href="#2514-统计同位异构字符串数目" class="headerlink" title="2514. 统计同位异构字符串数目"></a><a href="https://leetcode.cn/problems/count-anagrams/description/">2514. 统计同位异构字符串数目</a></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">给你一个字符串 s ，它包含一个或者多个单词。单词之间用单个空格 &#x27; &#x27; 隔开。</span><br><span class="line"></span><br><span class="line">如果字符串 t 中第 i 个单词是 s 中第 i 个单词的一个 排列 ，那么我们称字符串 t 是字符串 s 的同位异构字符串。</span><br><span class="line"></span><br><span class="line">比方说，&quot;acb dfe&quot; 是 &quot;abc def&quot; 的同位异构字符串，但是 &quot;def cab&quot; 和 &quot;adc bef&quot; 不是。请你返回 s 的同位异构字符串的数目，由于答案可能很大，请你将它对 $10^9 + 7$ 取余 后返回。</span><br></pre></td></tr></table></figure><p>对于一个长为 n 的单词，其全排列的个数为 n!，但由于相同的字母不做区分，所以如果有 x 个字母 a，还需要除以这些 a 的全排列的个数，即 x!，对于其余字母同理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countAnagrams</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        String[] strs = s.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">numerator</span> <span class="operator">=</span> <span class="number">1L</span>;  <span class="comment">// 分子：所有字母的全排列</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">denominator</span> <span class="operator">=</span> <span class="number">1L</span>;  <span class="comment">// 分母：每个字母出现的次数的全排列</span></span><br><span class="line">        <span class="keyword">for</span> (String str: strs) &#123;</span><br><span class="line">            <span class="type">int</span>[] cnts = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span> c: str.toCharArray()) &#123;</span><br><span class="line">                cnts[c - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">                len++;</span><br><span class="line">                denominator = denominator * cnts[c - <span class="string">&#x27;a&#x27;</span>] % MOD;</span><br><span class="line">                numerator = numerator * len % MOD;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>)mod(numerator, denominator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MOD</span> <span class="operator">=</span> (<span class="type">int</span>) <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">mod</span><span class="params">(<span class="type">long</span> numerator, <span class="type">long</span> denominator)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) (numerator * quickPow(denominator, MOD - <span class="number">2</span>) % MOD);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="title function_">quickPow</span><span class="params">(<span class="type">long</span> x, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">        <span class="keyword">for</span> (; n &gt; <span class="number">0</span>; n /= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n % <span class="number">2</span> &gt; <span class="number">0</span>) </span><br><span class="line">                res = res * x % MOD;</span><br><span class="line">            x = x * x % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">由于计算机的编码方式，形如 (a * b) % base 这样的运算，乘法的结果可能导致溢出，我们希望找到一种技巧，能够化简这种表达式，避免溢出同时得到结果。</summary>
    
    
    
    <category term="数学" scheme="https://luorongluorong.github.io/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
    <category term="乘法逆元" scheme="https://luorongluorong.github.io/tags/%E4%B9%98%E6%B3%95%E9%80%86%E5%85%83/"/>
    
    <category term="快速幂" scheme="https://luorongluorong.github.io/tags/%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    
  </entry>
  
  <entry>
    <title>最大公约数和最小公倍数：辗转相除法</title>
    <link href="https://luorongluorong.github.io/2023/04/02/algorithms/math/gcd_lcm/"/>
    <id>https://luorongluorong.github.io/2023/04/02/algorithms/math/gcd_lcm/</id>
    <published>2023-04-02T03:29:15.000Z</published>
    <updated>2023-04-02T03:59:20.945Z</updated>
    
    <content type="html"><![CDATA[<p>给定两个整数 a 和 b。</p><p>求最大公约数的办法可以使用辗转相除法，时间复杂度是 O(logn)，n 是 max(a,b)。</p><p>求最小公倍数的方法是利用 GCD：将两数相乘再除以 GCD。这里要注意防止溢出，可以使用其中一个数 a 先除以 GCD 再乘以另一个数 b。</p><h1 id="最大公约数-GCD-辗转相除法"><a href="#最大公约数-GCD-辗转相除法" class="headerlink" title="最大公约数 GCD: 辗转相除法"></a>最大公约数 GCD: 辗转相除法</h1><p><code>GCD（除数，被除数） = GCD（余数，除数）</code>，核心就是将余数变成新的除数，最后返回被除数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="comment">// a 是除数，b 是被除数</span></span><br><span class="line">    <span class="keyword">while</span> (a != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> a;  <span class="comment">// 记录除数</span></span><br><span class="line">        a = b % a;  <span class="comment">// 余数成为新的除数</span></span><br><span class="line">        b = tmp;  <span class="comment">// 除数成为新的被除数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 当余数为 0 时，说明 被除数 和 除数 之间是倍数关系，直接返回被除数</span></span><br><span class="line">    <span class="keyword">return</span> b;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>例题：<a href="https://leetcode.cn/problems/number-of-subarrays-with-gcd-equal-to-k/">2447. 最大公因数等于 K 的子数组数目</a></li></ul><h1 id="最小公倍数-LCM"><a href="#最小公倍数-LCM" class="headerlink" title="最小公倍数 LCM"></a>最小公倍数 LCM</h1><p>想求 LCM，必须先求 GCD。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">lcm</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a / gcd(a, b) * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (a != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> a;</span><br><span class="line">        a = b % a;</span><br><span class="line">        b = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>例题：<a href="https://leetcode.cn/problems/number-of-subarrays-with-lcm-equal-to-k/">2470. 最小公倍数为 K 的子数组数目</a></li></ul>]]></content>
    
    
    <summary type="html">最大公约数（GCD）和最小公倍数（LCM）是常见的简单数学知识，但是在实际应用中往往非常有效，因此显得十分优雅。</summary>
    
    
    
    <category term="数学" scheme="https://luorongluorong.github.io/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
    <category term="原创" scheme="https://luorongluorong.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
    <category term="最大公约数" scheme="https://luorongluorong.github.io/tags/%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0/"/>
    
    <category term="最小公倍数" scheme="https://luorongluorong.github.io/tags/%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0/"/>
    
    <category term="GCD" scheme="https://luorongluorong.github.io/tags/GCD/"/>
    
    <category term="LCM" scheme="https://luorongluorong.github.io/tags/LCM/"/>
    
    <category term="辗转相除法" scheme="https://luorongluorong.github.io/tags/%E8%BE%97%E8%BD%AC%E7%9B%B8%E9%99%A4%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>并查集</title>
    <link href="https://luorongluorong.github.io/2023/03/30/problems/union_find/"/>
    <id>https://luorongluorong.github.io/2023/03/30/problems/union_find/</id>
    <published>2023-03-30T13:15:27.000Z</published>
    <updated>2023-03-30T13:26:39.069Z</updated>
    
    <content type="html"><![CDATA[<p>Union-Find 算法的复杂度可以这样分析：构造函数初始化数据结构需要 O(N) 的时间和空间复杂度；连通两个节点union、判断两个节点的连通性connected、计算连通分量count所需的时间复杂度均为 O(1)。</p><p>Union-Find 算法的核心逻辑如下：</p><ol><li><p>用parent数组记录每个节点的父节点，相当于指向父节点的指针，所以parent数组内实际存储着一个森林（若干棵多叉树）。</p></li><li><p>用size数组记录着每棵树的重量，目的是让union后树依然拥有平衡性，保证各个 API 时间复杂度为 O(logN)，而不会退化成链表影响操作效率。</p></li><li><p>在find函数中进行路径压缩，保证任意树的高度保持在常数，使得各个 API 时间复杂度为 O(1)。使用了路径压缩之后，可以不使用size数组的平衡优化。</p></li></ol><h1 id="最终的具体实现"><a href="#最终的具体实现" class="headerlink" title="最终的具体实现"></a>最终的具体实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UF</span> &#123;</span><br><span class="line">    <span class="comment">// 连通分量个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count;</span><br><span class="line">    <span class="comment">// 存储每个节点的父节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] parent;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// n 为图中节点的个数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UF</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.count = n;</span><br><span class="line">        parent = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            parent[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将节点 p 和节点 q 连通</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rootP</span> <span class="operator">=</span> find(p);</span><br><span class="line">        <span class="type">int</span> <span class="variable">rootQ</span> <span class="operator">=</span> find(q);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rootP == rootQ)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        parent[rootQ] = rootP;</span><br><span class="line">        <span class="comment">// 两个连通分量合并成一个连通分量</span></span><br><span class="line">        count--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断节点 p 和节点 q 是否连通</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">connected</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rootP</span> <span class="operator">=</span> find(p);</span><br><span class="line">        <span class="type">int</span> <span class="variable">rootQ</span> <span class="operator">=</span> find(q);</span><br><span class="line">        <span class="keyword">return</span> rootP == rootQ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 路径压缩，保持树的高度平衡</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (parent[x] != x) &#123;</span><br><span class="line">            parent[x] = find(parent[x]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parent[x];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回图中的连通分量个数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">count</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="简单-寻找图中是否存在路径"><a href="#简单-寻找图中是否存在路径" class="headerlink" title="简单: 寻找图中是否存在路径"></a>简单: <a href="https://leetcode.cn/problems/find-if-path-exists-in-graph/">寻找图中是否存在路径</a></h1><p>问图中两个节点是否连通。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">validPath</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] edges, <span class="type">int</span> source, <span class="type">int</span> destination)</span> &#123;</span><br><span class="line">        <span class="type">UnionFind</span> <span class="variable">uf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UnionFind</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] e: edges) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> e[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> e[<span class="number">1</span>];</span><br><span class="line">            uf.union(s, d);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uf.connected(source, destination);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UnionFind</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] parents;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UnionFind</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.parents = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            parents[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rootp</span> <span class="operator">=</span> find(p);</span><br><span class="line">        <span class="type">int</span> <span class="variable">rootq</span> <span class="operator">=</span> find(q);</span><br><span class="line">        <span class="keyword">if</span> (rootp == rootq) <span class="keyword">return</span>;</span><br><span class="line">        parents[rootp] = rootq;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (parents[x] != x) &#123;</span><br><span class="line">            parents[x] = find(parents[x]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parents[x];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">connected</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> find(p) == find(q);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">总结并查集模板。</summary>
    
    
    
    <category term="技术" scheme="https://luorongluorong.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="算法" scheme="https://luorongluorong.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="并查集" scheme="https://luorongluorong.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>最长公共子序列问题及其变种问题</title>
    <link href="https://luorongluorong.github.io/2023/03/28/problems/longest_common_subsequence/"/>
    <id>https://luorongluorong.github.io/2023/03/28/problems/longest_common_subsequence/</id>
    <published>2023-03-28T02:15:38.000Z</published>
    <updated>2023-03-31T15:30:08.573Z</updated>
    
    <content type="html"><![CDATA[<p>两个字符串的 公共子序列 是这两个字符串所共同拥有的子序列。</p><p>本文简要介绍了最长公共子序列求长度、求子序列本身及变种问题，并贴上了我自己的解答。</p><h1 id="最长公共子序列：求长度"><a href="#最长公共子序列：求长度" class="headerlink" title="最长公共子序列：求长度"></a>最长公共子序列：求<a href="https://leetcode.cn/problems/longest-common-subsequence">长度</a></h1><p>解题思路：见注释中的状态规划。</p><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestCommonSubsequence</span><span class="params">(String text1, String text2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len1</span> <span class="operator">=</span> text1.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">len2</span> <span class="operator">=</span> text2.length();</span><br><span class="line">        <span class="comment">// 状态：dp[i][j] := text1[0,i] 和 text2[0,j] 最长公共子序列的长度</span></span><br><span class="line">        <span class="comment">// 转移：dp[i][j] = dp[i - 1][j - 1] + 1, text1[i] == text2[j]</span></span><br><span class="line">        <span class="comment">//                 Math.max(dp[i][j - 1], dp[i - 1][j])</span></span><br><span class="line">        <span class="comment">// 初始：dp[i][j] = 0;</span></span><br><span class="line">        <span class="comment">// 结果：dp[len1][len2]</span></span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[len1 + <span class="number">1</span>][len2 + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= len1; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= len2; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (text1.charAt(i - <span class="number">1</span>) == text2.charAt(j - <span class="number">1</span>)) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = Math.max(dp[i][j - <span class="number">1</span>], dp[i - <span class="number">1</span>][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[len1][len2];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>时间复杂度：O(len1 * len2) </p></li><li><p>空间复杂度：O(len1 * len2)</p></li></ul><h1 id="最长公共子序列：求子字符串本身"><a href="#最长公共子序列：求子字符串本身" class="headerlink" title="最长公共子序列：求子字符串本身"></a>最长公共子序列：求子字符串本身</h1><ul><li>求出最长公共子序列的长度</li><li>倒序求出</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">longestCommonSupersequence</span><span class="params">(String text1, String text2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len1</span> <span class="operator">=</span> text1.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">len2</span> <span class="operator">=</span> text2.length();</span><br><span class="line">        <span class="comment">// 最长公共子序列</span></span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[len1 + <span class="number">1</span>][len2 + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= len1; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= len2; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (text1.charAt(i - <span class="number">1</span>) == text2.charAt(j - <span class="number">1</span>)) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = Math.max(dp[i][j - <span class="number">1</span>], dp[i - <span class="number">1</span>][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 最长的子序列长度就是 dp[len1][len2]</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">p1</span> <span class="operator">=</span> len1;</span><br><span class="line">        <span class="type">int</span> <span class="variable">p2</span> <span class="operator">=</span> len2;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (p1 &gt; <span class="number">0</span> &amp;&amp; p2 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 注意！这里是比较两个字符是否相等</span></span><br><span class="line">            <span class="keyword">if</span> (text1.charAt(p1 - <span class="number">1</span>) == text2.charAt(p2 - <span class="number">1</span>)) &#123;</span><br><span class="line">                sb.append(text1.charAt(p1 - <span class="number">1</span>));</span><br><span class="line">                p1--;</span><br><span class="line">                p2--;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dp[p1][p2] == dp[p1 - <span class="number">1</span>][p2]) &#123;</span><br><span class="line">                p1--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                p2--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.reverse().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>时间复杂度：O(len1 * len2) </p></li><li><p>空间复杂度：O(len1 * len2)</p></li></ul><h3 id="Vjudge-的例题LCS"><a href="#Vjudge-的例题LCS" class="headerlink" title="Vjudge 的例题LCS"></a>Vjudge 的例题<a href="https://vjudge.net/problem/AtCoder-dp_f">LCS</a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以直接通过 Vjudge 的代码</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// [&quot;abcicba\nabdkscab&quot;]</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">text1</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">        <span class="type">String</span> <span class="variable">text2</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">        <span class="type">int</span> <span class="variable">len1</span> <span class="operator">=</span> text1.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">len2</span> <span class="operator">=</span> text2.length();</span><br><span class="line">        <span class="comment">// 最长公共子序列</span></span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[len1 + <span class="number">1</span>][len2 + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= len1; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= len2; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (text1.charAt(i - <span class="number">1</span>) == text2.charAt(j - <span class="number">1</span>)) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = Math.max(dp[i][j - <span class="number">1</span>], dp[i - <span class="number">1</span>][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 最长的子序列长度就是 dp[len1][len2]</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">p1</span> <span class="operator">=</span> len1;</span><br><span class="line">        <span class="type">int</span> <span class="variable">p2</span> <span class="operator">=</span> len2;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (p1 &gt; <span class="number">0</span> &amp;&amp; p2 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 注意！这里是比较两个字符是否相等</span></span><br><span class="line">            <span class="keyword">if</span> (text1.charAt(p1 - <span class="number">1</span>) == text2.charAt(p2 - <span class="number">1</span>)) &#123;</span><br><span class="line">                sb.append(text1.charAt(p1 - <span class="number">1</span>));</span><br><span class="line">                p1--;</span><br><span class="line">                p2--;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dp[p1][p2] == dp[p1 - <span class="number">1</span>][p2]) &#123;</span><br><span class="line">                p1--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                p2--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sb.reverse().toString());    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="变种：求超序"><a href="#变种：求超序" class="headerlink" title="变种：求超序"></a>变种：求<a href="https://leetcode.cn/problems/shortest-common-supersequence/">超序</a></h1><p>给出两个字符串 str1 和 str2，返回同时以 str1 和 str2 作为子序列的最短字符串。</p><p>解题思路：</p><ul><li>求出最长公共子序列的长度</li><li>倒序求出超序字符串<ul><li>比较两个字符是否相等：<code>text1.charAt(p1 - 1) == text2.charAt(p2 - 1)</code>，相等则可以使用一个字符作为公共字符。</li><li>确定状态转移的方向: <code>dp[p1][p2] == dp[p1 - 1][p2]</code>，相等则可以往 text1 方向迁移，不相等则可以往 text2 方向迁移。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">shortestCommonSupersequence</span><span class="params">(String text1, String text2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len1</span> <span class="operator">=</span> text1.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">len2</span> <span class="operator">=</span> text2.length();</span><br><span class="line">        <span class="comment">// 最长公共子序列</span></span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[len1 + <span class="number">1</span>][len2 + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= len1; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= len2; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (text1.charAt(i - <span class="number">1</span>) == text2.charAt(j - <span class="number">1</span>)) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = Math.max(dp[i][j - <span class="number">1</span>], dp[i - <span class="number">1</span>][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 最长的子序列长度就是 dp[len1][len2]，如何根据这个信息找到最短超序呢？</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">p1</span> <span class="operator">=</span> len1;</span><br><span class="line">        <span class="type">int</span> <span class="variable">p2</span> <span class="operator">=</span> len2;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (p1 &gt; <span class="number">0</span> || p2 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p1 == <span class="number">0</span>) &#123;</span><br><span class="line">                sb.append(text2.charAt(--p2));</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p2 == <span class="number">0</span>) &#123;</span><br><span class="line">                sb.append(text1.charAt(--p1));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 注意！这里是比较两个字符是否相等</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (text1.charAt(p1 - <span class="number">1</span>) == text2.charAt(p2 - <span class="number">1</span>)) &#123;</span><br><span class="line">                sb.append(text1.charAt(p1 - <span class="number">1</span>));</span><br><span class="line">                p1--;</span><br><span class="line">                p2--;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dp[p1][p2] == dp[p1 - <span class="number">1</span>][p2]) &#123;</span><br><span class="line">                sb.append(text1.charAt(p1 - <span class="number">1</span>));</span><br><span class="line">                p1--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(text2.charAt(p2 - <span class="number">1</span>));</span><br><span class="line">                p2--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.reverse().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>时间复杂度：O(len1 * len2) </p></li><li><p>空间复杂度：O(len1 * len2)</p></li></ul><h1 id="变种：输出所有的最长公共子序列"><a href="#变种：输出所有的最长公共子序列" class="headerlink" title="变种：输出所有的最长公共子序列"></a>变种：输出<strong>所有的</strong>最长公共子序列</h1><p>参考：<a href="https://blog.csdn.net/lisonglisonglisong/article/details/41596309">【动态规划】输出所有的最长公共子序列</a></p><p>解题思路：</p><ul><li>把 while 循环变成一个递归函数 helper。</li><li>当 <code>dp[p1][p2 - 1] == dp[p1 - 1][p2]</code> 时，说明可以往两个方向拓展，递归 helper 函数。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">longestCommonSupersequenceAll</span><span class="params">(String text1, String text2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len1</span> <span class="operator">=</span> text1.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">len2</span> <span class="operator">=</span> text2.length();</span><br><span class="line">        <span class="comment">// 最长公共子序列</span></span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[len1 + <span class="number">1</span>][len2 + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= len1; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= len2; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (text1.charAt(i - <span class="number">1</span>) == text2.charAt(j - <span class="number">1</span>)) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = Math.max(dp[i][j - <span class="number">1</span>], dp[i - <span class="number">1</span>][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 最长的子序列长度就是 dp[len1][len2]</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">p1</span> <span class="operator">=</span> len1;</span><br><span class="line">        <span class="type">int</span> <span class="variable">p2</span> <span class="operator">=</span> len2;</span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        helper(text1, text2, dp, sb, p1, p2, set);</span><br><span class="line">        <span class="keyword">for</span> (String str: set) </span><br><span class="line">            System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">helper</span><span class="params">(String text1, String text2, <span class="type">int</span>[][] dp, String sb, <span class="type">int</span> p1, <span class="type">int</span> p2, Set&lt;String&gt; set)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (p1 &gt; <span class="number">0</span> &amp;&amp; p2 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 注意！这里是比较两个字符是否相等</span></span><br><span class="line">            <span class="keyword">if</span> (text1.charAt(p1 - <span class="number">1</span>) == text2.charAt(p2 - <span class="number">1</span>)) &#123;</span><br><span class="line">                sb += (text1.charAt(p1 - <span class="number">1</span>));</span><br><span class="line">                p1--;</span><br><span class="line">                p2--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (dp[p1][p2 - <span class="number">1</span>] == dp[p1 - <span class="number">1</span>][p2]) &#123;</span><br><span class="line">                    helper(text1, text2, dp, sb, p1 - <span class="number">1</span>, p2, set);</span><br><span class="line">                    helper(text1, text2, dp, sb, p1, p2 - <span class="number">1</span>, set);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dp[p1][p2 - <span class="number">1</span>] &gt; dp[p1 - <span class="number">1</span>][p2]) &#123;</span><br><span class="line">                    p2--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    p1--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        set.add((<span class="keyword">new</span> <span class="title class_">StringBuilder</span>(sb).reverse()).toString());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><p>子串和子序列的区别在于，子串必须是连续的。求最长公共子串的长度和求最长公共子序列的长度的方法几乎一样，并且比最长公共子序列问题简单许多。</p><h1 id="最长公共子串：长度或者子串本身"><a href="#最长公共子串：长度或者子串本身" class="headerlink" title="最长公共子串：长度或者子串本身"></a>最长公共子串：长度或者子串本身</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">shortestCommonSubstring</span><span class="params">(String text1, String text2)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len1</span> <span class="operator">=</span> text1.length();</span><br><span class="line">    <span class="type">int</span> <span class="variable">len2</span> <span class="operator">=</span> text2.length();</span><br><span class="line">    <span class="comment">// 状态：dp[i][j] := text1[0,i] 和 text2[0,j] 最长公共子串的长度</span></span><br><span class="line">    <span class="comment">// 转移：dp[i][j] = dp[i - 1][j - 1] + 1, text1[i] == text2[j]</span></span><br><span class="line">    <span class="comment">//                 0</span></span><br><span class="line">    <span class="comment">// 初始：dp[i][j] = 0;</span></span><br><span class="line">    <span class="comment">// 结果：maxLen</span></span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[len1 + <span class="number">1</span>][len2 + <span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxI</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= len1; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= len2; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (text1.charAt(i - <span class="number">1</span>) == text2.charAt(j - <span class="number">1</span>)) &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (dp[i][j] &gt; maxLen) &#123;</span><br><span class="line">                    maxI = i;</span><br><span class="line">                    maxLen = dp[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (maxLen == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> text1.substring(maxI - maxLen, maxI);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="输出所有的最长公共字串"><a href="#输出所有的最长公共字串" class="headerlink" title="输出所有的最长公共字串"></a>输出所有的最长公共字串</h1><p>具体解法同上，使用一个 list 记录 maxI 即可。代码略。</p>]]></content>
    
    
    <summary type="html">总结最长公共子序列问题，类别划分及具体练习，帮助读者加以理解和巩固。</summary>
    
    
    
    <category term="技术" scheme="https://luorongluorong.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="算法" scheme="https://luorongluorong.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="原创" scheme="https://luorongluorong.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
    <category term="LCS" scheme="https://luorongluorong.github.io/tags/LCS/"/>
    
  </entry>
  
  <entry>
    <title>质数、因数和质因数</title>
    <link href="https://luorongluorong.github.io/2023/03/05/problems/prime_number/"/>
    <id>https://luorongluorong.github.io/2023/03/05/problems/prime_number/</id>
    <published>2023-03-05T07:45:05.000Z</published>
    <updated>2023-04-05T06:25:14.276Z</updated>
    
    <content type="html"><![CDATA[<h1 id="质数和质因数"><a href="#质数和质因数" class="headerlink" title="质数和质因数"></a>质数和质因数</h1><p><em>质数</em>是指只能被1和自身整除的正整数。</p><ul><li><strong>质数排列</strong>：请你帮忙给从 1 到 n 的数设计排列方案，使得所有的「质数」都应该被放在「质数索引」（索引从 1 开始）上；你需要返回可能的方案总数。</li><li><a href="https://leetcode.cn/problems/count-primes/">204. 计数质数</a>：给定整数 n ，返回 所有小于非负整数 n 的质数的数量。</li><li><a href="">2523. 范围内最接近的两个质数</a><br>这些题目都可以用一些常见的算法来解决，例如素性测试、埃氏筛、欧拉筛等。</li></ul><p><em>因数</em>用于描述两个正整数的整除关系。当 <code>除数 a</code> 被 <code>被除数 b</code> 整除且模为 0 时，a 是 b 的因数。</p><ul><li><a href="https://leetcode.cn/problems/number-of-common-factors/">2427. 公因子的数目</a>：找出两个正整数的公因子的数目。</li></ul><p><em>质因数</em>是指能整除一个数的质数1。在力扣上，有一些题目是关于质因数的，例如：</p><ul><li><a href="">丑数</a>：丑数 就是只包含质因数 2、3 和 5 的正整数。给你一个整数 n ，请你判断 n 是否为 丑数。<br>功能:输入一个正整数，按照从小到大的顺序输出它的所有质因子（重复的也要列举）（如180的质因子为2 2 3 3 5）。</li><li><a href="">丑数 II</a>：给你一个整数 n ，请你找出并返回第 n 个 丑数 。丑数 就是只包含质因数 2、3 和/或 5 的正整数。</li><li><a href="">2521. 数组乘积中的不同质因数数目</a></li><li><a href="">2507. 使用质因数之和替换后可以取到的最小值</a><br>这些题目都可以用一些常见的算法来解决，例如分解质因式、动态规划等。</li></ul><h1 id="求质数的算法：线性筛和欧拉筛"><a href="#求质数的算法：线性筛和欧拉筛" class="headerlink" title="求质数的算法：线性筛和欧拉筛"></a>求质数的算法：线性筛和欧拉筛</h1><p>线性筛和欧拉筛是两种<strong>用于求质数的算法</strong>，它们的核心思想是让每个合数只被它的最小质因数筛去，从而达到线性时间复杂度。</p><h2 id="方法一：埃氏筛"><a href="#方法一：埃氏筛" class="headerlink" title="方法一：埃氏筛"></a>方法一：埃氏筛</h2><ul><li>思路：<ul><li>若 i 是质数，筛掉 i 的倍数；如果没有被小于自己的数筛掉，就是质数</li><li>从 i * i 开始筛，更小的已经被i之前的质数筛掉了</li></ul></li><li>时间复杂度<ul><li>预处理：每个质数 i，循环 MX/ i 次, O(loglogMX)</li><li>MX范围内的质数个数：MX / logMX</li><li>二分时间复杂度：O(log(MX / logMX))</li><li>枚举范围内的数组：O(r / log r - l / log l)</li></ul></li></ul><h2 id="方法二：线性筛（欧拉筛）"><a href="#方法二：线性筛（欧拉筛）" class="headerlink" title="方法二：线性筛（欧拉筛）"></a>方法二：线性筛（欧拉筛）</h2><ul><li>思路：<ul><li>每个合数只被划掉一次</li><li>被它的最小质因子划掉</li></ul></li><li>时间复杂度：O(MX)</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>线性筛<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">linearSieve</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span>[] isPrime = <span class="keyword">new</span> <span class="title class_">boolean</span>[n + <span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span>[] primes = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    Arrays.fill(isPrime, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isPrime[i]) &#123;</span><br><span class="line">            primes[cnt++] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; cnt &amp;&amp; i * primes[j] &lt;= n; j++) &#123;</span><br><span class="line">            isPrime[i * primes[j]] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % primes[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>欧拉筛<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">eulerSieve</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span>[] isPrime = <span class="keyword">new</span> <span class="title class_">boolean</span>[n + <span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span>[] phi = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span>[] primes = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    Arrays.fill(isPrime, <span class="literal">true</span>);</span><br><span class="line">    phi[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isPrime[i]) &#123;</span><br><span class="line">            primes[cnt++] = i;</span><br><span class="line">            phi[i] = i - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; cnt &amp;&amp; i * primes[j] &lt;= n; j++) &#123;</span><br><span class="line">            isPrime[i * primes[j]] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % primes[j] == <span class="number">0</span>) &#123;</span><br><span class="line">                phi[i * primes[j]] = phi[i] * primes[j];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                phi[i * primes[j]] = phi[i] * (primes[j] - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>C++ 版本<br><a href="https://leetcode.cn/problems/closest-prime-numbers-in-range/solutions/2040087/yu-chu-li-zhi-shu-mei-ju-by-endlesscheng-uw2b/comments/1876831/">参考</a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 埃式筛</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">closestPrimes</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;        </span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(<span class="number">2</span>, <span class="number">-1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 埃式筛</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">isPrimes</span><span class="params">(right + <span class="number">1</span>, <span class="literal">true</span>)</span></span>;  <span class="comment">// 从 [1, right] 的数都是质数</span></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; primes;  <span class="comment">// 质数</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= right; ++i) &#123;</span><br><span class="line">            <span class="comment">// 1. 不是质数</span></span><br><span class="line">            <span class="keyword">if</span> (!isPrimes[i]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">// 2. 是质数</span></span><br><span class="line">            <span class="keyword">if</span> (i &gt;= left) primes.<span class="built_in">emplace_back</span>(i);</span><br><span class="line">            <span class="comment">// 将质数的倍数都设置为 false</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">2</span>; j &lt;= (right + <span class="number">1</span>) / i; ++j) &#123;</span><br><span class="line">                isPrimes[i * j] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (primes.<span class="built_in">size</span>() &lt; <span class="number">2</span>) <span class="keyword">return</span> res;</span><br><span class="line">        res[<span class="number">0</span>] = primes[<span class="number">0</span>];</span><br><span class="line">        res[<span class="number">1</span>] = primes[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; primes.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (res[<span class="number">1</span>] - res[<span class="number">0</span>] &gt; primes[i] - primes[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                res[<span class="number">0</span>] = primes[i - <span class="number">1</span>];</span><br><span class="line">                res[<span class="number">1</span>] = primes[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 线性筛</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">closestPrimes</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;        </span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(<span class="number">2</span>, <span class="number">-1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 线性筛</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">isPrimes</span><span class="params">(right + <span class="number">1</span>, <span class="literal">true</span>)</span></span>;  <span class="comment">// 从 [1, right] 的数都是质数</span></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; primes;  <span class="comment">// 质数</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= right; ++i) &#123;</span><br><span class="line">            <span class="comment">// 是质数</span></span><br><span class="line">            <span class="keyword">if</span> (isPrimes[i]) primes.<span class="built_in">emplace_back</span>(i);</span><br><span class="line">            <span class="comment">// 标记该数与最小质因数的乘积为非素数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> p: primes) &#123;</span><br><span class="line">                <span class="comment">// 两个素数的乘积已经超过 right 了</span></span><br><span class="line">                <span class="keyword">if</span> (p &gt; right / i) <span class="keyword">break</span>;</span><br><span class="line">                isPrimes[p * i] = <span class="literal">false</span>;</span><br><span class="line">                <span class="comment">// 找到第一个最小质因子就撤</span></span><br><span class="line">                <span class="keyword">if</span> ((i % p) == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 二分法找到第一个 ≥ left 的质数</span></span><br><span class="line">        <span class="keyword">if</span> (primes.<span class="built_in">size</span>() &lt; <span class="number">2</span> || primes[primes.<span class="built_in">size</span>() - <span class="number">2</span>] &lt; left) <span class="keyword">return</span> res;</span><br><span class="line">        <span class="type">int</span> firstIdx = <span class="built_in">lower_bound</span>(primes.<span class="built_in">begin</span>(), primes.<span class="built_in">end</span>(), left) - primes.<span class="built_in">begin</span>();        </span><br><span class="line">        res[<span class="number">0</span>] = primes[firstIdx]; </span><br><span class="line">        res[<span class="number">1</span>] = primes[firstIdx + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = firstIdx + <span class="number">2</span>; i &lt; primes.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (res[<span class="number">1</span>] - res[<span class="number">0</span>] &gt; primes[i] - primes[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                res[<span class="number">0</span>] = primes[i - <span class="number">1</span>];</span><br><span class="line">                res[<span class="number">1</span>] = primes[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="【质数】例题"><a href="#【质数】例题" class="headerlink" title="【质数】例题"></a>【质数】例题</h1><h2 id="2523-范围内最接近的两个质数"><a href="#2523-范围内最接近的两个质数" class="headerlink" title="2523. 范围内最接近的两个质数"></a><a href="https://leetcode.cn/problems/closest-prime-numbers-in-range">2523. 范围内最接近的两个质数</a></h2><p>分享🤏笔记（来自灵神的视频讲解哦）</p><ol><li>第一步：预处理找到范围内所有的质数（有两种方法：埃氏筛、线性筛）</li><li>第二步：用二分法找到第一个 ≥ left 的质数</li><li>第三步：找符合条件（质数差最小）的 两个质数</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findValidSplit</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    Map&lt;Integer, Integer&gt; left = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, Integer&gt;(); <span class="comment">// left[p] 表示质数 p 首次出现的下标</span></span><br><span class="line">    <span class="type">int</span>[] right = <span class="keyword">new</span> <span class="title class_">int</span>[n]; <span class="comment">// right[i] 表示左端点为 i 的区间的右端点的最大值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> nums[i];</span><br><span class="line">        <span class="comment">// d 表示从</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">2</span>; d * d &lt;= x; ++d)  <span class="comment">// 分解质因数</span></span><br><span class="line">            <span class="keyword">if</span> (x % d == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 遇到质因数           </span></span><br><span class="line">                <span class="comment">// ...</span></span><br><span class="line">                <span class="keyword">for</span> (x /= d; x % d == <span class="number">0</span>; x /= d) ;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> (left.containsKey(x))</span><br><span class="line">                right[left.get(x)] = i;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                left.put(x, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><ol><li>分割数组使乘积互质</li></ol></li></ul><h1 id="【因数】例题"><a href="#【因数】例题" class="headerlink" title="【因数】例题"></a>【因数】例题</h1><h2 id="2427-公因子的数目"><a href="#2427-公因子的数目" class="headerlink" title="2427. 公因子的数目"></a><a href="https://leetcode.cn/problems/number-of-common-factors/">2427. 公因子的数目</a></h2><p>找出两个正整数的公因子的数目。</p>]]></content>
    
    
    <summary type="html">总结质数和因数相关的基本概念，类别划分及具体练习，帮助读者加以理解和巩固。</summary>
    
    
    
    <category term="技术" scheme="https://luorongluorong.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="质数" scheme="https://luorongluorong.github.io/tags/%E8%B4%A8%E6%95%B0/"/>
    
    <category term="因数" scheme="https://luorongluorong.github.io/tags/%E5%9B%A0%E6%95%B0/"/>
    
    <category term="质因数" scheme="https://luorongluorong.github.io/tags/%E8%B4%A8%E5%9B%A0%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>从波提切利到梵高——英国国家美术馆珍藏展</title>
    <link href="https://luorongluorong.github.io/2023/02/15/arts/museum_exhibition_bottlicelli_to_van_gogh/"/>
    <id>https://luorongluorong.github.io/2023/02/15/arts/museum_exhibition_bottlicelli_to_van_gogh/</id>
    <published>2023-02-15T09:21:11.000Z</published>
    <updated>2023-03-08T06:25:12.725Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从波提切利到梵高——英国国家美术馆珍藏展"><a href="#从波提切利到梵高——英国国家美术馆珍藏展" class="headerlink" title="从波提切利到梵高——英国国家美术馆珍藏展"></a>从波提切利到梵高——英国国家美术馆珍藏展</h1><blockquote><p><a href="https://mp.weixin.qq.com/s/tRktZH3iKV2wWOFyKq2g3w">https://mp.weixin.qq.com/s/tRktZH3iKV2wWOFyKq2g3w</a></p></blockquote><p>Botticelli to Van Gogh</p><p>Masterpieces from the National Gallery, London</p><blockquote><p>2023年1月17日至5月7日，上海博物馆首度联手英国国家美术馆，推出“对话世界”文物艺术大展系列的第二个展览——“从波提切利到梵高：英国国家美术馆珍藏展”。展览通过 52 件大师杰作，为观众奉上一场视觉盛宴，讲述欧洲绘画的故事。<br>本次展览中，观众可以欣赏到波提切利、拉斐尔、提香、戈塞特、卡拉瓦乔、普桑、克劳德、凡·代克，伦勃朗、卡纳莱托、康斯特布尔、透纳、塞尚、高更、马奈、莫奈以及梵高等艺术史中如雷贯耳的大师杰作；了解到意大利文艺复兴、北方文艺复兴、威尼斯画派、样式主义、巴洛克、荷兰画派、洛可可、古典主义、浪漫主义、印象派、后印象派等熠熠生辉的艺术流派。这也是上海博物馆馆庆70周年为公众奉上的重磅展览。观众们无需前往伦敦,便可欣赏到欧洲艺术巨匠的绘画杰作。</p></blockquote><p><img src="/static/museums/museum_exhibition_bottlicelli_to_van_gogh_1_poster.jpg" alt="Alt text"></p><p>漫步展厅，眼前呈现的仿佛是一片欧洲油画史的缩影。展览第一至第五单元，主要展现了从早期文艺复兴至巴洛克时期（15世纪至17世纪）的绘画作品。那么绘画是如何成为艺术的？欧洲油画的技法从何而来？当时艺术行业的生产模式又是怎样？透过作品，亲近艺术史，本期我们将与大家一起细读欣赏英国国家美术馆珍藏展前五单元的内容。</p><blockquote><p>找一找本次展览的植物和屋顶。</p></blockquote><p><a href="https://mp.weixin.qq.com/s/m5Lpz6fwBrgzZLTfCs8Z2A">https://mp.weixin.qq.com/s/m5Lpz6fwBrgzZLTfCs8Z2A</a></p><h1 id="追溯欧洲绘画传统"><a href="#追溯欧洲绘画传统" class="headerlink" title="追溯欧洲绘画传统"></a>追溯欧洲绘画传统</h1><p>欧洲早在古希腊、古罗马时期就有类似于今日的绘画艺术，但岁月悠远，盛况难以悉知。今人所熟悉的欧洲绘画传统，兴起于15-16世纪的意大利及欧洲北方。这一时期艺术家开始为公众所瞩目，出现了艺术收藏，有人撰写画论和艺术家传记，欧洲最早的美术学院也应运而生，简而言之，绘画开始从手艺转变为艺术。</p><p>伴随着艺术的觉醒，绘画技术突飞猛进，油画逐渐取代坦培拉（即蛋彩画，Tempera）成为优势画种，速写也首次被艺术家用来记录灵感，这时期有许多艺术家投入到对透视和解剖的研究中，迫不及待地把新知识用于创作。就在短短的两三百年间，欧洲社会对绘画的态度、画家的精神风貌以及绘画技术都发生了惊人的改变，后世怀着敬畏之心把这一时期称为“文艺复兴”（Renaissance），是不无道理的。</p><p>在本次展览第一单元中，波提切利、梅西那等画家展现了15世纪意大利早期文艺复兴的生机勃勃。若对比梅西那《书房中的圣哲罗姆》与前代画作，不难看出经过15世纪大师们的努力，两个绘画问题已经得到了开创性的解决。首先是单个人物的造型问题，即怎么把一个人物画得浑圆立体、有呼吸、有质感；然后是画面空间问题，即怎么把人物与背景之间的关系画得令人信服的问题。 </p><p><img src="/static/museums/museum_exhibition_bottlicelli_to_van_gogh_2.jpg" alt="Alt text"></p><p>《书房中的圣哲罗姆》安托内罗·达·梅西那</p><p>约1475年，石灰板油画</p><p>© The National Gallery, London</p><h1 id="从坦培拉（蛋彩画）到油画"><a href="#从坦培拉（蛋彩画）到油画" class="headerlink" title="从坦培拉（蛋彩画）到油画"></a>从坦培拉（蛋彩画）到油画</h1><p>文艺复兴时期的大量画作都是依附于建筑和器物的壁画、祭坛画等，能来到中国观众面前的架上绘画杰作尚属少数，其基材是木板与画布兼用，技法是坦培拉与油画兼用，这一时期是坦培拉技法最为辉煌的时期，也是坦培拉向油画过渡的时期。</p><p><strong>坦培拉技法</strong>是主要以蛋黄加水作为媒介剂来调和颜料的一种作画技法，它色彩透明，干燥后坚固稳定，很适合湿壁画（Fresco）的要求，但由于干燥速度太快，使用时难以调色，只能通过往单一颜色中调白、调黑来控制明度的变化，像素描排线那样描绘，逐笔依次形成明暗过渡的素描关系。这种技法在佛罗伦萨有很强的传统，由于它天然倾向于用素描和线条来建构画面，因此<em>佛罗伦萨画派</em>也被称为“<strong>素描派</strong>”。</p><p><img src="/static/museums/museum_exhibition_bottlicelli_to_van_gogh_3.jpg" alt="Alt text"></p><p>《圣泽诺比乌斯的三个奇迹》 桑德罗·波提切利</p><p>约1500年，木板蛋彩画</p><p>© The National Gallery, London</p><p>油画是以油作为媒介来调和颜料的作画技法，用于罩染和厚涂均合适，且干燥速度适当，便于调色，经得住反复修改和塑造。油画是北方的传统技法，本次参展的戈塞特、昆廷·马西斯等北方大师都用油画技法，他们的作品往往色彩饱满，刻画精细，对皮毛、布料、砖石等材料的质感表现也属一流。</p><p><img src="/static/museums/museum_exhibition_bottlicelli_to_van_gogh_4.jpg" alt="Alt text"></p><p>《年轻公主（丹麦多萝西娅？）》 扬·戈塞特</p><p>约1530-1532年，橡木板油画</p><p>© The National Gallery, London</p><p>大约自15世纪中期以后，意大利画家为了拓展坦培拉的表现力，普遍在坦培拉底色之上罩染油性色层，发展出<strong>坦培拉与油画技术相结合</strong>的技法。当时威尼斯与北方画家接触较密切，是南方最喜欢布面油画的地区，<em>威尼斯画派</em>的代表人物提香、丁托列托等强调肌肤色彩的生动感，对轮廓线和服饰进行虚实处理，也开始注意笔触的表现力，形成了与讲求素描的佛罗伦萨派不同的艺术取向，被称为“<strong>色彩派</strong>”，两派艺术取向不同，由此开启了持续至19世纪的素描与色彩之争。</p><p><img src="/static/museums/museum_exhibition_bottlicelli_to_van_gogh_5.jpg" alt="Alt text"></p><p>《女子肖像》提香</p><p>约1510-1512年，布面油画</p><p>© The National Gallery, London</p><h1 id="行业的模式：作坊与委托订制"><a href="#行业的模式：作坊与委托订制" class="headerlink" title="行业的模式：作坊与委托订制"></a>行业的模式：作坊与委托订制</h1><p>在文艺复兴社会的普遍观念中，艺术家仍保留着手艺人的大部分特点。当时展览、拍卖等艺术市场机制还没有出现，艺术家的主要行业模式是<strong>委托订制</strong>（Commission），即先由委托人（Patron）提出要求，画家再根据要求完成画作。画家多半是本地行会的注册师傅，他组建自己的作坊，招收学徒作为助手。学徒平日里磨制颜料，熬胶放稿，从事各种杂务，也练习作画，他们的目标是有朝一日也成为独立行业的师傅。作坊既是生产单位，也是教学单位，大型绘画尤其依赖学徒的协助，最终交付的作品，有些只有关键部分是师傅亲笔所作，其他部分常常交由学徒完成。观念转变是一个漫长的过程，从16世纪开始，大约经过三百年的时间，作坊师傅变成了画室里单打独斗的艺术家，不过委托订制从未消失。在15世纪大师的作坊里，走出了文艺复兴盛期的诸位巨匠。米开朗基罗出自吉兰达约的作坊；拉斐尔出自佩鲁吉诺的作坊；提香出自乔瓦尼·贝利尼的作坊。</p><p>16世纪，米开朗基罗和拉斐尔先后前往罗马，为天主教世界最大的委托人、拥有最重要古典雕刻收藏的教皇工作。本次展出的拉斐尔《圣母子与施洗者圣约翰（加瓦圣母）》，大约作于他到达罗马不久后，当时他正处于风格转变的关头，在随后几年中他以稳健有力、和谐典雅的新风格完成了签字厅（Stanza della Segnatura）壁画，成为照耀百代的艺术伟迹。</p><p><img src="/static/museums/museum_exhibition_bottlicelli_to_van_gogh_6.jpg" alt="Alt text"></p><p>《圣母子与施洗者圣约翰（加瓦圣母）》 拉斐尔</p><p>约1510-1511年，木板油画</p><p>© The National Gallery, London</p><h1 id="17-世纪欧洲艺术中心"><a href="#17-世纪欧洲艺术中心" class="headerlink" title="17 世纪欧洲艺术中心"></a>17 世纪欧洲艺术中心</h1><p>17世纪的艺术家面对文艺复兴的巨大遗产，也面对着天主教和新教分裂的欧洲。意大利已经成为欧洲艺术的中心，法国和西班牙王室很久以来就礼聘意大利艺术家服务于自己的宫廷，两国的年轻艺术家也把游学意大利看作成才的必由之路。</p><p>普桑毕生的大部分时间都在罗马度过，他虽是法国人，却只有待在意大利的古典废墟中才觉得回到了家，他是17世纪古典主义和素描派的代表人物，他的画有种永恒的秩序感，得到后印象主义大师塞尚的盛赞。</p><p><img src="/static/museums/museum_exhibition_bottlicelli_to_van_gogh_7.jpg" alt="Alt text"></p><p>《酒神的养育》 尼古拉·普桑</p><p>约1628年，布面油画</p><p>© The National Gallery, London</p><p>另一位人称“克劳德·洛兰”的法国人同样以意大利为家，他是风景画发展中的一个重要人物，探索过户外作画，还把废墟引入画中，他擅长用晨曦和落霞赋予画面一层滤镜般的色调，“克劳德式的风景”成了一个特定的审美意象，强烈地影响了18世纪的英国美学。</p><p><img src="/static/museums/museum_exhibition_bottlicelli_to_van_gogh_8.jpg" alt="Alt text"></p><p>《圣乌苏拉登船的海港》 克劳德</p><p>1641年，布面油画</p><p>© The National Gallery, London</p><h1 id="油画语言的发展：笔触与表现"><a href="#油画语言的发展：笔触与表现" class="headerlink" title="油画语言的发展：笔触与表现"></a>油画语言的发展：笔触与表现</h1><p>17世纪北方新教地区的艺术家失去了天主教会的大宗订件，一部分画家离开本地前往国外，鲁本斯的学生<strong>凡·代克</strong>即在英国为朝臣贵族画肖像。刚刚独立的荷兰共和国是这旧世界中的新国家，在那里，新的委托人饶有兴致地欣赏着风景、静物、室内景和风俗画等新题材。17世纪，<strong>布面油画</strong>取代木板坦培拉成为具有统治地位的画种，正是在这个世纪里，荷兰最具有影响的画家<strong>伦勃朗</strong>与<strong>鲁本斯</strong>、<strong>委拉斯贵兹</strong>一道，发扬了油画笔触的表现力，完善了油画语言的武库。</p><p>委拉斯贵兹以“直接画法”出名，所谓直接画法就是彻底抛弃三百年来的坦培拉底色，用纯粹的油画颜料直接作画，他第一个这样做，使得油画完全摆脱了坦培拉。委拉斯贵兹在画家生涯的各个时期用过不同画法，他四十多岁效力于西班牙费利佩四世宫廷时，用<strong>直接画法</strong>画了一批名作，包括本次参展的《费尔南多总主教像》。此画以黑红两个大色块衬托出人物的面容，摒弃精致的线条，略去服饰和衬布的细部，痛快地画出而不是制作出主教的神情，潇洒的笔触留在画面上，成为欣赏的对象。</p><p><img src="/static/museums/museum_exhibition_bottlicelli_to_van_gogh_9.jpg" alt="Alt text"></p><p>《费尔南多总主教肖像》 迭戈·委拉斯贵兹</p><p>1640-1645年，布面油画</p><p>© The National Gallery, London</p><p>伦勃朗是整个绘画史上最杰出的肖像画家之一，他年轻时候有过一段称心岁月，中年迭遭变故，晚岁贫病交加，人们相信他的苦难经历给他的肖像画注入了忧患和深沉。他一生留下多幅自画像，本次参展的《63岁的自画像》以强烈的光影对比突出面容，用阔大的笔触和厚涂法（Impasto），寥寥数笔便塑造出结实的块面。其利用光影对比来建构画面的手法，可以通过卡拉瓦乔，追溯到莱奥纳尔多·达·芬奇的明暗法（Chiaroscuro）。</p><p><img src="/static/museums/museum_exhibition_bottlicelli_to_van_gogh_10.jpg" alt="Alt text"><br>《63岁的自画像》 伦勃朗</p><p>1669年，布面油画</p><p>© The National Gallery, London</p><p>16世纪威尼斯画派的画家就意识到笔触的表现力，但直到伦勃朗和委拉斯贵兹的时代，笔触才广泛为画家所接受。笔触的模糊性有时比清晰的刻画更有余味，它什么都不像，却又什么都像，它调动观众的想象参与到欣赏中去，补充画家实际上并没有画出的东西。这是一种高超的艺术手法，优秀的文学家也都知道怎么用。除此之外，有意识地把笔触留在画面上，留下作画过程的痕迹，承认这是一幅画而非画中所描绘的现实，让观众体验艺术与现实之间的来回转换——这种态度使绘画超越了再现而成为表现。<strong>绘画语言本身成为欣赏对象，这正是艺术成为艺术的关键所在。</strong></p><h1 id="雅游时代"><a href="#雅游时代" class="headerlink" title="雅游时代"></a>雅游时代</h1><p>一个年轻人只有经历过意大利旅行，瞻仰过那里的古典遗迹和艺术杰作，才算完成了教育——17世纪就有英国人怀着这样的想法踏上旅程，到18世纪这终于成为社会共识，成千上万的英国富家子弟带着家人的叮嘱，在称职或不称职的“伴游导师”（Tutor）陪同下，启程汇入雅游（即壮游，Grand Tour）的洪流。雅游最初主要是英国青年前往意大利的教育旅行，但后来欧洲大陆人和美国人也都参加进来。雅游的内涵一直在变化，但在18世纪的雅游中，艺术成为一个突出的主题。</p><p><img src="/static/museums/museum_exhibition_bottlicelli_to_van_gogh_11.jpg" alt="Alt text"></p><p>《约翰·斯图亚特勋爵与其兄弟伯纳德·斯图亚特勋爵》 安东尼·凡·代克</p><p>约1638年，布面油画</p><p>© The National Gallery, London</p><p>典型的雅游路线是从英国多弗尔渡海至法国加莱，从那里换乘驿马车前往巴黎，向南经瑞士、萨伏伊一带翻越阿尔卑斯山来到波河平原，随后前往威尼斯游历一段时间，再取道佛罗伦萨抵达旅行的目的地罗马。回程不走原路的，或经德国、荷兰再返回英国。通常完成一次这样的雅游要一年半左右时间，长的可达三年。早在17世纪，英国早期收藏艺术的一位重要人物，阿伦德尔勋爵（Earl of Arundel）就曾命建筑师伊尼戈·琼斯（Inigo Jones）陪同他前往意大利考察艺术和建筑。至雅游大盛的18世纪，英国文艺名流普遍成行，其中不乏以伴游导师的身份，趁便旅行的。雅游经历成了谈论艺术的敲门砖，伦敦著名的古典艺术家和鉴赏家团体爱好者协会（Society of Dilettanti），其入会条件就是完成一次雅游。</p><p>雅游给艺术家带来了机会，本次参展的好几位艺术家都仰仗旅行者的订件为生。意大利画家卡纳莱托笔下的威尼斯运河风光令人赏心悦目，大受英国客户的欢迎，他后来索性移居伦敦，在那里画了十年风景；</p><p><img src="/static/museums/museum_exhibition_bottlicelli_to_van_gogh_12.jpg" alt="Alt text"></p><p>《威尼斯：城堡区圣伯多禄圣殿》 卡纳莱托</p><p>18世纪30年代，布面油画</p><p>© The National Gallery, London</p><p>法国人韦尔内长年旅居罗马，向旅行者销售带有古典题材的海景画；</p><p><img src="/static/museums/museum_exhibition_bottlicelli_to_van_gogh_13.jpg" alt="Alt text"></p><p>《有渔民的河流》</p><p>克劳德-约瑟夫·韦尔内</p><p>1751年，布面油画</p><p>© The National Gallery, London</p><p>威尼斯人巴托尼则是雅游时代最著名肖像画家之一。</p><p><img src="/static/museums/museum_exhibition_bottlicelli_to_van_gogh_14.jpg" alt="Alt text"></p><p>《班克斯费的约翰·斯科特（？）肖像》</p><p>庞贝奥·吉罗拉莫·巴托尼</p><p>1774年，布面油画</p><p>© The National Gallery, London</p><h1 id="英国画派的崛起"><a href="#英国画派的崛起" class="headerlink" title="英国画派的崛起"></a>英国画派的崛起</h1><p>18世纪也是英国画派蓬勃兴起的时期。自文艺复兴以来，英国惯于招引欧洲大陆的杰出艺术家前来服务，17世纪前期在位的英王查理一世热爱艺术，是当时欧洲最重要的收藏家之一。查理一世身边围绕着一个鉴赏团体，研究者称之为“白厅圈子”（Whitehall Groupe），前文提到的阿伦德尔勋爵就是这个团体中颇具眼力的一位，这批鉴赏家手下还掌控着一群像伊尼戈·琼斯这样的行家里手，并经常把他们派往欧洲各地发掘艺术品。</p><p>在与欧洲大陆艺术的长期交往中，英国本土艺术家成长起来，他们效仿巴黎美术学院，于18世纪中期创立了英国皇家美术学院（Royal Academy of Arts），其创院会员囊括了英国本土的优秀艺术家，本次参展的庚斯博罗就赫然在列。<strong>庚斯博罗</strong>是极富个性的肖像画大师，在温泉疗养胜地巴斯为人画了不少肖像，他的手法非常巧妙，不做过多的细节刻画，却让人感到很“像”，英国皇家美术学院的首任院长约书亚·雷诺兹曾评价庚斯博罗的高超手法，认为他深谙“传神”的要诀，省略了不必要画出的地方，任凭观众的想象力去补充。</p><p><img src="/static/museums/museum_exhibition_bottlicelli_to_van_gogh_15.jpg" alt="Alt text"><br>《拉尔夫·朔姆贝格医生》</p><p>托马斯·庚斯博罗</p><p>约1770年，布面油画</p><p>© The National Gallery, London</p><p>18世纪的英国艺术圈子颇有几分像中国明清的文人圈子，画家与学者之间过从甚密，一位名流时常有数位画家朋友为之画像，这让英国画家经常讨论谁画得更像以及什么是“像”。<strong>他们普遍意识到传神的秘诀不在于造型准确，而在于捕捉最能反映性格的瞬间，以及留有想象余地的表现手法。</strong>这类讨论提醒我们，再现从来就不是模仿现实，<strong>再现的本质其实就是表现</strong>。因为有这样的见识，英国肖像画达到了很高成就，这在两位苏格兰画家<strong>亨利·雷班</strong>爵士和<strong>大卫·威尔基</strong>的作品中也能感受到。</p><p><img src="/static/museums/museum_exhibition_bottlicelli_to_van_gogh_16.jpg" alt="Alt text"><br>《弓箭手》</p><p>亨利·雷班爵士</p><p>约1789-1790年，布面油画</p><p>© The National Gallery, London</p><p><strong>康斯特布尔</strong>的《干草车》曾让法国浪漫主义大师德拉克洛瓦深受启发，并为之改了自己的画。本次参展的《史特拉福磨坊》与《干草车》属于同期作品，天空高远清澈，充满光和大气的感觉。康斯特布尔笔下的风雨晴霁不是拼凑而成，而是完整的观察记录。</p><p><img src="/static/museums/museum_exhibition_bottlicelli_to_van_gogh_17.jpg" alt="Alt text"><br>《史特拉福磨坊》</p><p>约翰·康斯特布尔</p><p>1820年，布面油画</p><p>© The National Gallery, London</p><p>晚些时候另一位英国画家<strong>约翰·拉斯金</strong>也用同样的精神观察风景，他首次记录了因工业污染而产生的一种暴雨云，还曾深入阿尔卑斯山长期考察，写下厚厚一卷书，那是画家论山的最佳著作之一。拉斯金对<strong>透纳</strong>推崇备至，赞扬后者的风景画不盲从自然却更加真实地体现了自然的精神。与这时期英国风景画的细致观察不同，法国画家<strong>柯罗</strong>追求的是风景的诗意。</p><p><img src="/static/museums/museum_exhibition_bottlicelli_to_van_gogh_18.jpg" alt="Alt text"></p><p>《倾斜的树干》</p><p>让-巴蒂斯塔-卡米耶·柯罗</p><p>约1860-1865年，布面油画</p><p>© The National Gallery, London</p><h1 id="印象派与后印象派"><a href="#印象派与后印象派" class="headerlink" title="印象派与后印象派"></a>印象派与后印象派</h1><p>19世纪艺术家热衷于思考的一个问题是怎样画出户外的真实光效。因为户外光线非常明亮，传统绘画遇到外光一般都采用降调处理，把户外的色彩关系转换成室内的灰调子。<strong>德拉克洛瓦</strong>不满足于这种处理方式，想要发展出一套适于描绘户外光线的新的色彩体系。因为传统绘画一直把暗部处理为黑色，所以他从研究暗部的色彩开始找突破口。德拉克洛瓦的探索方向感召了一代青年画家，他们画了一幅《向德拉克洛瓦致敬》的群像表达敬意，马奈正是群像中的一员。</p><p><strong>马奈</strong>的《咖啡厅演奏会的一角》是一幅色彩斑斓、阳光明媚的快乐的画，画中的主角是位特别能干的女招待，但整幅画的气氛才是真正的主题。马奈也有改革绘画的雄心，他借鉴17世纪荷兰大师<strong>哈尔斯</strong>的活泼笔触，放弃了结实的素描——那种效果只出现在室内侧光下，而处于户外强光照射下的形体，都会失去立体感，显得扁平。一边是得自知识和理解的素描造型，一边是得自观察和感受的形体表象，马奈抛弃了所知而选择了所见，这使他成为印象派的先驱。马奈沿着德拉克洛瓦的方向更进一步，他加强了对补色的研究，画中男子的蓝色衣服与啤酒杯及背景中的黄色相互强化，拉宽了画面的色域。</p><p><img src="/static/museums/museum_exhibition_bottlicelli_to_van_gogh_19.jpg" alt="Alt text"></p><p>《咖啡厅演奏会的一角》</p><p>爱德华·马奈</p><p>约1878-1880年，布面油画</p><p>© The National Gallery, London</p><p>19世纪，现代工业颜料丰富了画家的调色板，取代了一些原先十分昂贵的矿物颜料，例如拉斐尔画中圣母衣服所用的群青，当时价比黄金，常常在合同中单独规定成色和用量，现在则被廉价的工业群青所替代。数百年来，由于制成的颜料不能长时间保存，只能在作画前准备，19世纪中期，管装颜料的发明结束了这一局面，颜料随用随取，画家现在可以背着轻便的画箱走出户外，随地作画，这有力推动了印象派画家的探索。</p><p><strong>莫奈、雷诺阿、塞尚、高更</strong>和<strong>梵高</strong>等人先后都参加过青年画家联合展览会，展览会举办过八届，“<strong>印象派</strong>”这个名字即得自莫奈于首届展览会上展出的作品，因此上述几位画家都曾被认为是印象派画家。印象派并无自己的宣言，画风也很不一致，只是早期多作风景写生，强调在户外完成画作，<strong>抛开所知，仅画所见</strong>，在画面上捕捉到所谓“视网膜印象”。为此，他们作画时严守光照条件，当光照条件变化时，他们就停笔，等光照条件恢复了再继续画。虽然组织上非常松散，但印象派画家怀抱理想、贫贱不移的早期经历，给后世留下了一幅感人的画面。</p><p>莫奈和雷诺阿晚年见到了自己的成功，塞尚、高更和梵高则一早离开了印象派——他们都不甘于仅描绘所见。塞尚继承家产后，退隐家乡埃克斯独自作画，他在世纪末被人重新发现，其雄伟坚实的风格迷住了他过去的同道们，本次展出的是他早期一张作品。</p><p><img src="/static/museums/museum_exhibition_bottlicelli_to_van_gogh_20.jpg" alt="Alt text"><br>《画室中的火炉》</p><p>保罗·塞尚</p><p>约1865年，布面油画</p><p>© The National Gallery, London</p><p>梵高在巴黎经历了乌托邦的破灭，只身前往法国南部小镇阿尔，燃烧生命的最后十年，成为我们时代的大师。《长草地与蝴蝶》是他罹患精神疾病，在圣雷米医院即将结束疗养时所作，画的正是医院的花园，梵高没有画出地平线，完全凭他标志性的笔触和漂亮的色彩支撑起画面，他的色彩极富表现力，热烈率直但并不简单，其复杂的黄-蓝、红-绿补色系统可以看作自马奈以来艺术家努力的成果。梵高像拉斐尔一样卒于37岁，他传奇的一生定义了现代艺术家的形象，其影响远远超乎艺术界。</p><p><img src="/static/museums/museum_exhibition_bottlicelli_to_van_gogh_21.jpg" alt="Alt text"></p><p>《长草地与蝴蝶》</p><p>文森特·梵高</p><p>1890年，布面油画</p><p>© The National Gallery, London</p><p>高更受到原始主义和自然主义的影响，对人在现代社会中的异化深恶痛绝，他曾尝试与梵高结伴作画，又前往荒凉的布列塔尼寻求世外桃源，末了他来到南太平洋的法属殖民地塔西提岛，最后死在岛上。</p><p><img src="/static/museums/museum_exhibition_bottlicelli_to_van_gogh_22.jpg" alt="Alt text"><br>《窗前果盆和啤酒杯》</p><p>保罗·高更</p><p>可能作于1890年，布面油画</p><p>© The National Gallery, London</p><p>1910年，罗杰·弗莱在英国举办“马奈与后印象主义画家”展览，从那时起，人们开始把塞尚、高更和梵高归为一派，称他们是后印象主义画家。这三位艺术家站在传统艺术与现代艺术的转折点，其中塞尚对后世的影响尤其巨大，被尊为“现代主义之父”。</p><p><hr><br>绘画是人类普遍具有的冲动，但在大多数文明中，绘画一直停留在实用的层面上，只有屈指可数的几个文明超越了实用性，视绘画为值得宝藏的精神价值，中国和欧洲恰都属于这样的文明。中国与欧洲对待绘画的态度具有惊人的相似性——我们都认为艺术性不在“画什么”而在“怎么画”；都不惜千金收藏画作，为之著录，并发展起颇为相近的鉴定传统；我们都崇敬画家，就连津津乐道的画家故事也如出一辙——天才的无师自通、惊人表演和自由不羁；我们也都通过绘画来窥探人性，陶冶情操，并留下连篇累牍的著作。每当想起中国和欧洲文明不约而同竟有如此相似的艺术传统，心中都不禁涌起一股惊奇感！欧洲画史群星闪耀，岂能遍数？观其大略，本次展览的52幅杰作已经足够。</p><blockquote><p>*本文选编自《欧洲油画五百年：英国国家美术馆珍藏展简介》，有删节。作者：万木春（中国美术学院教授）<br>原文刊于上海博物馆编，《从波提切利到梵高：英国国家美术馆珍藏集》，上海书画出版社，2023年。</p></blockquote><h1 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h1><blockquote><p><a href="https://mp.weixin.qq.com/s/7yzyQHTyMYCatfPISzj5Fg">https://mp.weixin.qq.com/s/7yzyQHTyMYCatfPISzj5Fg</a></p></blockquote><!-- <div style="line-height:0"><img src="/static/museums/museum_exhibition_bottlicelli_to_van_gogh_list1.jpg" alt=""><img src="/static/museums/museum_exhibition_bottlicelli_to_van_gogh_list2.jpg" alt=""><img src="/static/museums/museum_exhibition_bottlicelli_to_van_gogh_list3.jpg" alt=""><img src="/static/museums/museum_exhibition_bottlicelli_to_van_gogh_list4.jpg" alt=""><img src="/static/museums/museum_exhibition_bottlicelli_to_van_gogh_list5.jpg" alt=""><img src="/static/museums/museum_exhibition_bottlicelli_to_van_gogh_list6.jpg" alt=""><img src="/static/museums/museum_exhibition_bottlicelli_to_van_gogh_list7.jpg" alt=""><img src="/static/museums/museum_exhibition_bottlicelli_to_van_gogh_list8.jpg" alt=""><img src="/static/museums/museum_exhibition_bottlicelli_to_van_gogh_list9.jpg" alt=""></div> --><p><img src="/static/museums/museum_exhibition_bottlicelli_to_van_gogh_list1.jpg" alt="Alt text"><br><img src="/static/museums/museum_exhibition_bottlicelli_to_van_gogh_list2.jpg" alt="Alt text"><br><img src="/static/museums/museum_exhibition_bottlicelli_to_van_gogh_list3.jpg" alt="Alt text"><br><img src="/static/museums/museum_exhibition_bottlicelli_to_van_gogh_list4.jpg" alt="Alt text"><br><img src="/static/museums/museum_exhibition_bottlicelli_to_van_gogh_list5.jpg" alt="Alt text"><br><img src="/static/museums/museum_exhibition_bottlicelli_to_van_gogh_list6.jpg" alt="Alt text"><br><img src="/static/museums/museum_exhibition_bottlicelli_to_van_gogh_list7.jpg" alt="Alt text"><br><img src="/static/museums/museum_exhibition_bottlicelli_to_van_gogh_list8.jpg" alt="Alt text"><br><img src="/static/museums/museum_exhibition_bottlicelli_to_van_gogh_list9.jpg" alt="Alt text"></p><h1 id="再现·大师——沉浸式光影体验"><a href="#再现·大师——沉浸式光影体验" class="headerlink" title="再现·大师——沉浸式光影体验"></a>再现·大师——沉浸式光影体验</h1><p>NG TREASURES: Masters-Reborn </p><p>An Immersive Digital Experience</p><p><a href="https://mp.weixin.qq.com/s/c88ZeJXEgbDzjW7xu1c4xg">https://mp.weixin.qq.com/s/c88ZeJXEgbDzjW7xu1c4xg</a></p><blockquote><p>上海博物馆将与品源文化共同打造珍藏展的展外特展——“ NG200 再现•大师｜沉浸式光影特展”，展览将在上海博物馆4楼第三展厅同期举行，所有购买“从波提切利到梵高——英国国家美术馆珍藏展”门票（含购买数字藏品获得门票）的观众，预约参观当日皆可享受一票两展的权益，一次畅游珍藏展与光影特展，敬请期待！</p></blockquote><p>包括这次未能参展的英国国家美术馆馆藏珍品的梵高的《向日葵》、莫奈的《睡莲》、达芬奇的《岩间圣母》等，</p><p>本次光影体验分两大展区，经过打卡墙和序曲，进入第一展区，观众将欣赏到一场6分钟左右的沉浸光影体验，打通视觉与听觉，随着光影叙事，进入西方美术史的不同阶段与大师创作心路。</p><p>第一展区观影结束后，观众将穿过梵高向日葵万花筒打卡区，进入“对话大师”二创区，在这里可通过数字展示屏、打卡和互动的方式，来欣赏中国年轻设计力量向大师致敬的无限创意。</p><!-- 预测函数与函数之间的调用关系是否存在。训练一个 linkbert 。在代码上训练LinkBERT: Pretraining Language Models with Document Links数据集？AutoPruner: transformer-based call graph pruning --><blockquote><p>创建于 2023-02-15</p><p>更新于 2023-02-15</p></blockquote>]]></content>
    
    
    <summary type="html">2023年1月17日至5月7日，上海博物馆首度联手英国国家美术馆，推出“对话世界”文物艺术大展系列的第二个展览——“从波提切利到梵高：英国国家美术馆珍藏展”。展览通过 52 件大师杰作，为观众奉上一场视觉盛宴，讲述欧洲绘画的故事。</summary>
    
    
    
    <category term="艺术" scheme="https://luorongluorong.github.io/categories/%E8%89%BA%E6%9C%AF/"/>
    
    
    <category term="油画" scheme="https://luorongluorong.github.io/tags/%E6%B2%B9%E7%94%BB/"/>
    
    <category term="博物馆" scheme="https://luorongluorong.github.io/tags/%E5%8D%9A%E7%89%A9%E9%A6%86/"/>
    
  </entry>
  
  <entry>
    <title>动态规划总结及练习巩固</title>
    <link href="https://luorongluorong.github.io/2023/02/11/algorithms/dp_short/"/>
    <id>https://luorongluorong.github.io/2023/02/11/algorithms/dp_short/</id>
    <published>2023-02-11T11:39:15.000Z</published>
    <updated>2023-03-08T15:25:04.701Z</updated>
    
    <content type="html"><![CDATA[<h1 id="dp-精要"><a href="#dp-精要" class="headerlink" title="dp 精要"></a>dp 精要</h1><p>在前两期中，我们介绍了动态规划的基本概念，线性动态规划，前缀和，区间动态规划，背包动态规划，状态压缩动态规划，计数动态规划，矩阵快速幂，数位动态规划。</p><p>本章我们简要回顾一下前两期的内容，首先总结一下基本概念，然后把各个题型下的题目列表整理成了思维导图方便大家回忆。如果要看详细内容或者刷题，可以翻阅动态规划精讲前两期的内容。</p><p>本期我们主要回顾线性动态规划，前缀和，区间动态规划，背包动态规划并给大家聚合题目列表。</p><p>状态压缩动态规划，计数动态规划，矩阵快速幂，数位动态规划的题目聚合列表在动态规划精讲第四期给到大家。</p><h1 id="dp-基本概念"><a href="#dp-基本概念" class="headerlink" title="dp 基本概念"></a>dp 基本概念</h1><p>在动态规划精讲第一期中，我们有介绍一些基本概念，但是欠缺一点系统性。这里我们参考《算法竞赛进阶指南》中关于动态规划的讲解，把动态规划的几个核心概念梳理一下，并做一个总结。</p><p>首先我们给出思维导图<br><img src="/static/algorithms/dp_s1.jpeg" alt="Alt text"></p><p>动态规划用一句话概括就是对各个状态维度进行分阶段、有顺序、无重复、决策性的遍历求解。</p><h2 id="阶段-子问题"><a href="#阶段-子问题" class="headerlink" title="阶段(子问题)"></a>阶段(子问题)</h2><p>动态规划把原问题视为若干个重叠子问题的逐层递进，每个子问题的求解过程都构成一个阶段。在完成前一个阶段的计算后，才会执行下一阶段的计算。</p><h2 id="无后效性"><a href="#无后效性" class="headerlink" title="无后效性"></a>无后效性</h2><p>【在完成前一个阶段的计算后，才会执行下一阶段的计算】</p><p>无后效性: 为了保证这些计算能够按顺序，不重复地进行，DP 要求已经求解的子问题不受后续阶段的影响。(后面的阶段对前面的阶段没有影响)</p><h2 id="状态-转移-决策"><a href="#状态-转移-决策" class="headerlink" title="状态,转移,决策"></a>状态,转移,决策</h2><p>由无后效性。DP 对状态空间的遍历构成 DAG，遍历顺序就是该 DAG 的一个拓扑序。DAG 中的节点对应问题的状态，边对应状态之间的转移，转移的选取是 DP 中的决策。</p><h3 id="最优子结构"><a href="#最优子结构" class="headerlink" title="最优子结构"></a>最优子结构</h3><p>当动态规划用于求解最优化的问题时，下一阶段的最优解应该能由前面各阶段子问题的最优解导出。</p><h3 id="重复子问题"><a href="#重复子问题" class="headerlink" title="重复子问题"></a>重复子问题</h3><p>在阶段计算完成的时候，只会在每个状态上保留与最终解集相关的代表信息，这些信息具有可重复的求解过程，并且能够导出后续阶段的代表信息。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><em>状态，阶段，决策</em>是动态规划算法的三要素。</p><p>无后效性，最优子结构，重复子问题是问题能用 DP 求解的三个基本条件。</p><h1 id="分阶段"><a href="#分阶段" class="headerlink" title="分阶段"></a>分阶段</h1><p>动态规划是对各维状态进行分阶段，有顺序，无重复，决策性的遍历求解，其中对阶段进行划分后，每个阶段就是一个子问题。</p><p>动态规划算法有不同的阶段划分和推导的方式，常见的阶段划分方式如下:</p><p><strong>「线性 DP」</strong>: 具有线性阶段划分的 DP 问题<br><strong>「树形 DP」</strong>: 以节点的深度作为阶段的 DP 问题<br><strong>「图上 DP」</strong>: 以节点在图上的拓扑序作为阶段的 DP 问题<br>这是一个广义的概念，与线性空间类似，如果一个 DP 算法的状态包含多个维度，但是各个维度上具有线性变化的阶段，也是「线性 DP」，例如背包问题，「区间 DP」均属于这种情况。</p><p>下面我们看一下「线性 DP」中常见的阶段划分方式，以此作为对前两期内容的复习。</p><h2 id="（1）单串阶段划分"><a href="#（1）单串阶段划分" class="headerlink" title="（1）单串阶段划分"></a>（1）单串阶段划分</h2><p>代表问题：最长上升子序列；<br>状态表示：dp[i] := 以 s[i] 结尾的最长上升子序列长度；<br>阶段划分：子序列的结尾位置，从前到后。</p><h2 id="（2）双串阶段划分"><a href="#（2）双串阶段划分" class="headerlink" title="（2）双串阶段划分"></a>（2）双串阶段划分</h2><p>代表问题：最长公共子序列；<br>状态表示：dp[i][j] := s[0..i], t[0..j]的最长公共子序列长度；<br>阶段划分：s 和 t 分别已经处理的长度，二维。</p><h2 id="（3）棋盘阶段划分"><a href="#（3）棋盘阶段划分" class="headerlink" title="（3）棋盘阶段划分"></a>（3）棋盘阶段划分</h2><p>代表问题：数字三角形；<br>状态表示：dp[i][j] := 从 (0, 0) 走到 (i, j) 的最大的和；<br>阶段划分：路径的结尾位置（矩阵中的行列位置），二维。</p><h1 id="线性动态规划"><a href="#线性动态规划" class="headerlink" title="线性动态规划"></a>线性动态规划</h1><h2 id="「单串-DP」"><a href="#「单串-DP」" class="headerlink" title="「单串 DP」"></a>「单串 DP」</h2><p>对于「单串线性 DP」问题，i 是单串 s 上的位置。作为阶段具有时间或者位置等含义。有时只有单串上的位置不足以表示状态，需要同时附加一个维度 k，一般 k 有长度、个数、次数、颜色等含义。另，所附加的维度有时候可以是多个，如 k1, k2, …</p><h2 id="没有附加状态维度"><a href="#没有附加状态维度" class="headerlink" title="没有附加状态维度"></a>没有附加状态维度</h2><p><img src="/static/algorithms/dp_s2.png" alt="Alt text"></p><h2 id="附加一维状态"><a href="#附加一维状态" class="headerlink" title="附加一维状态"></a>附加一维状态</h2><p><img src="/static/algorithms/dp_s3.jpeg" alt="Alt text"></p><h2 id="附加多维状态"><a href="#附加多维状态" class="headerlink" title="附加多维状态"></a>附加多维状态</h2><p><img src="/static/algorithms/dp_s4.jpeg" alt="Alt text"></p><h2 id="「双串-DP」"><a href="#「双串-DP」" class="headerlink" title="「双串 DP」"></a>「双串 DP」</h2><p>dp[i][j]: i, j 分别是两个串上的位置。i, j 共同作为阶段，具有位置等含义。没有附加维度。<br><img src="/static/algorithms/dp_s5.jpeg" alt="Alt text"></p><h2 id="「棋盘-DP」"><a href="#「棋盘-DP」" class="headerlink" title="「棋盘 DP」"></a>「棋盘 DP」</h2><p>dp[i][j]: i, j 分别是棋盘（矩阵）的横纵坐标。阶段划分常见的两种情况分别为：</p><p>（1）i 作为阶段，具有位置等含义。j 是附加状态。<br>（2）i, j 共同作为阶段，具有位置等含义。没有附加维度。</p><p><img src="/static/algorithms/dp_s6.jpeg" alt="Alt text"></p><h2 id="「线性-DP」总结"><a href="#「线性-DP」总结" class="headerlink" title="「线性 DP」总结"></a>「线性 DP」总结</h2><p>下图是 Leetcode 上「线性 DP」的题目分类汇总，方便大家从整体上把握题目。其中不含「区间 DP」，「背包 DP」和前缀和。这三块将分别有专题汇总。</p><p><img src="/static/algorithms/dp_s7.png" alt="Alt text"></p><h1 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h1><p><img src="/static/algorithms/dp_s8.png" alt="Alt text"></p><h1 id="区间动态规划"><a href="#区间动态规划" class="headerlink" title="区间动态规划"></a>区间动态规划</h1><p>对于「区间 DP」，i, j 分别是区间的左右端点，其中阶段为区间长度(j - i + 1)，另外有一个是附加状态是区间左端点 i。</p><p>有的题会同时有附加维度 k。一般 k 会有长度，个数，次数，颜色等含义。</p><h2 id="减治型"><a href="#减治型" class="headerlink" title="减治型"></a>减治型</h2><p>dp[i][j] 仅与常数个更小规模子问题有关，不需要枚举分割点然后两边分别求解。</p><p>一般是与 dp[i + 1][j], dp[i][j - 1], dp[i + 1][j - 1] 有关。</p><h2 id="分治型"><a href="#分治型" class="headerlink" title="分治型"></a>分治型</h2><p>dp[i][j] 仅与 O(n) 个更小规模子问题有关，需要枚举分割点然后两边分别求解。</p><p>一般是枚举 [i, j] 的分割点，将区间分为 [i, k] 和 [k+1, j]， 对每个 k 分别求解（下面公式的 f），再汇总（下面公式的 g）。</p><p><img src="/static/algorithms/dp_s9.png" alt="Alt text"></p><h1 id="背包动态规划"><a href="#背包动态规划" class="headerlink" title="背包动态规划"></a>背包动态规划</h1><p>对于背包问题，“已经处理的物品数”为阶段，“背包的总体积”为附加状态。</p><p>下面是 Leetcode 上与「背包 DP」相关的题目，一共十几道，分成了「01 背包」和「完全背包」、「组合问题」和「优化问题」两个维度，方便大家在刷题中感悟总结。<br><img src="/static/algorithms/dp_s10.png" alt="Alt text"></p>]]></content>
    
    
    <summary type="html">总结动态规划相关的基本概念，类别划分及具体练习，帮助读者加以理解和巩固。</summary>
    
    
    
    <category term="技术" scheme="https://luorongluorong.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="算法" scheme="https://luorongluorong.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="动态规划" scheme="https://luorongluorong.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="练习" scheme="https://luorongluorong.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>两类前缀和问题</title>
    <link href="https://luorongluorong.github.io/2023/01/16/problems/prefix_sum/"/>
    <id>https://luorongluorong.github.io/2023/01/16/problems/prefix_sum/</id>
    <published>2023-01-16T02:58:27.000Z</published>
    <updated>2023-03-31T15:30:18.523Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h1><p>下面给出两个例子。</p><ul><li>第一个是给定 target，计算和为 target 的子数组的数目；</li><li>第二个是给定 target，计算和为 target 的子数组的最短的长度。</li></ul><p>解题的核心思想都是一致的：</p><ol><li>使用 Map 记录出现过的 prefix_sum 的数目/最近下标。</li><li>处理特殊值，即将 0 放入 Map 中。</li><li>进入循环：<ol><li>查找 Map 中是否存在 prefix_sum - target 的值，更新 res。</li><li>把本轮循环的 prefix_sum 放入 Map 中。</li></ol></li><li>退出循环，返回 res。</li></ol><h2 id="560-和为-K-的子数组"><a href="#560-和为-K-的子数组" class="headerlink" title="560. 和为 K 的子数组"></a><a href="https://leetcode.cn/problems/subarray-sum-equals-k/description/">560. 和为 K 的子数组</a></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">subarraySum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[] presums = <span class="keyword">new</span> <span class="title class_">int</span>[len + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= len; ++i) &#123;</span><br><span class="line">            presums[i] = presums[i - <span class="number">1</span>] + nums[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;  <span class="comment">// 计算组成 target 的子数组的组合的数目</span></span><br><span class="line">        Map&lt;Integer, Integer&gt; cnts = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  <span class="comment">// [presum, idx]        </span></span><br><span class="line">        cnts.put(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= len; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">presum</span> <span class="operator">=</span> presums[i];   </span><br><span class="line">            res += cnts.getOrDefault(presum - target, <span class="number">0</span>);  </span><br><span class="line">            <span class="comment">// 作为被比较的对象</span></span><br><span class="line">            cnts.put(presum, cnts.getOrDefault(presum, <span class="number">0</span>) + <span class="number">1</span>);       </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1590-使数组和能被-P-整除"><a href="#1590-使数组和能被-P-整除" class="headerlink" title="1590. 使数组和能被 P 整除"></a><a href="https://leetcode.cn/problems/make-sum-divisible-by-p/description/">1590. 使数组和能被 P 整除</a></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSubarray</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> p)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[] presums = <span class="keyword">new</span> <span class="title class_">int</span>[len + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">            presums[i + <span class="number">1</span>] = (presums[i] + nums[i]) % p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">target</span> <span class="operator">=</span> presums[len]; </span><br><span class="line">        <span class="keyword">if</span> (target == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> len;  <span class="comment">// 组成 target 的子数组的最短长度</span></span><br><span class="line">        Map&lt;Integer, Integer&gt; records = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();     </span><br><span class="line">        records.put(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= len; ++i) &#123;            </span><br><span class="line">            <span class="type">int</span> <span class="variable">presum</span> <span class="operator">=</span> presums[i];                     </span><br><span class="line">            </span><br><span class="line">            <span class="type">int</span> <span class="variable">search</span> <span class="operator">=</span> ((presum - target) % p + p) % p;</span><br><span class="line">            <span class="keyword">if</span> (records.containsKey(search)) &#123;</span><br><span class="line">                res = Math.min(res, i - records.get(search));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 作为被比较的对象</span></span><br><span class="line">            records.put(presum, i);   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res == len ? -<span class="number">1</span> : res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二维前缀和"><a href="#二维前缀和" class="headerlink" title="二维前缀和"></a>二维前缀和</h1><p>在求二维前缀和的时候，仅需注意两个点：</p><ul><li>presums 比 matrix 的长宽都大 1。</li><li>在计算子矩阵和的时候，rowbig 和 colbig 都要记得加 1。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NumMatrix</span> &#123;</span><br><span class="line">    <span class="type">int</span>[][] presums;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NumMatrix</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> matrix.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="built_in">this</span>.presums = <span class="keyword">new</span> <span class="title class_">int</span>[row + <span class="number">1</span>][col + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; ++j) &#123;</span><br><span class="line">                presums[i + <span class="number">1</span>][j + <span class="number">1</span>] = presums[i][j + <span class="number">1</span>] + presums[i + <span class="number">1</span>][j] - presums[i][j] + matrix[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sumRegion</span><span class="params">(<span class="type">int</span> row1, <span class="type">int</span> col1, <span class="type">int</span> row2, <span class="type">int</span> col2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> presums[row2 + <span class="number">1</span>][col2 + <span class="number">1</span>] + presums[row1][col1] - presums[row1][col2 + <span class="number">1</span>] - presums[row2 + <span class="number">1</span>][col1];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://leetcode.cn/problems/range-sum-query-2d-immutable/solutions/627420/er-wei-qu-yu-he-jian-suo-ju-zhen-bu-ke-b-2z5n/">304 二维区域和检索 - 矩阵不可变 的官方题解</a></li></ul>]]></content>
    
    
    <summary type="html">总结常见前缀和问题及其解法。</summary>
    
    
    
    <category term="技术" scheme="https://luorongluorong.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="算法" scheme="https://luorongluorong.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="原创" scheme="https://luorongluorong.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
    <category term="前缀和" scheme="https://luorongluorong.github.io/tags/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    
  </entry>
  
  <entry>
    <title>背包动态规划</title>
    <link href="https://luorongluorong.github.io/2022/12/21/problems/dp_knacksack/"/>
    <id>https://luorongluorong.github.io/2022/12/21/problems/dp_knacksack/</id>
    <published>2022-12-21T11:09:35.000Z</published>
    <updated>2023-04-10T10:59:46.951Z</updated>
    
    <content type="html"><![CDATA[<p>背包问题（Knapsack problem）是一种组合优化的 NP 完全问题。</p><p>背包问题可以描述为：给定一组物品，每种物品都有自己的重量和价格，在限定的总重量内，我们如何选择，才能使得物品的总价格最高。</p><p>这是背包问题最基础的描述，再往下细分还可以把背包问题分成几大类，其中比较基础的是 3 种：<strong>01 背包，完全背包，多重背包</strong>。</p><p><img src="/static/algorithms/dp_kp.png" alt="Alt text"></p><h1 id="01-背包问题"><a href="#01-背包问题" class="headerlink" title="01 背包问题"></a>01 背包问题</h1><p>有 n 种物品，物品 j 的体积为 vj，价值为 wi，有一个体积限制 V。每种物品只有 1 个，只有选或者不选，而没有选几个的问题，此问题称为 <em>01 背包问题</em>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j] := 考虑了 [0..i]  里的物品，占用了 j 空间，所能取得的最大价值。</span><br><span class="line">dp[i][j] = dp[i - 1][j] 当前物品不选</span><br><span class="line">           dp[i - 1][j - v[i]] + w[i] 当前物品选，j - v[i] 要大于等于 0</span><br><span class="line">初始化时将所有状态置为 0 即可。           </span><br></pre></td></tr></table></figure><p>题解，技巧在于讲 dp 初始化成 <code>int[][] dp = new int[N + 1][V + 1];</code>。</p><p>例题见 <a href="https://www.acwing.com/problem/content/2/">2. 01背包问题</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://www.acwing.com/problem/content/submission/code_detail/21428160/</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> in.nextInt();  <span class="comment">// 物品数目</span></span><br><span class="line"><span class="type">int</span> <span class="variable">V</span> <span class="operator">=</span> in.nextInt();  <span class="comment">// 背包容积</span></span><br><span class="line"><span class="comment">// 状态：dp[i][j] 表示 [0...i] 的物品达到 j 体积的最高价值</span></span><br><span class="line"><span class="comment">// 转移：dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - volume] + value)</span></span><br><span class="line"><span class="comment">// 初始：dp[0][j] = 0 /* 背包不要求装满 */</span></span><br><span class="line"><span class="comment">// 返回：dp[N][V]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全部状态初始化为 0</span></span><br><span class="line"><span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[N + <span class="number">1</span>][V + <span class="number">1</span>];</span><br><span class="line"><span class="type">int</span>[] volumes = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line"><span class="type">int</span>[] values = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">    <span class="comment">// 体积和价值</span></span><br><span class="line">    volumes[i] = in.nextInt();</span><br><span class="line">    values[i] = in.nextInt();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 初始化 0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> values[i - <span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">volume</span> <span class="operator">=</span> volumes[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= V; ++j)</span><br><span class="line">        dp[i][j] = Math.max(dp[i - <span class="number">1</span>][j] <span class="comment">/* 不拿 */</span>, </span><br><span class="line">                            (j - volume &lt; <span class="number">0</span>) ? <span class="number">0</span> : dp[i - <span class="number">1</span>][j - volume] + value <span class="comment">/* 拿 */</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.print(dp[N][V]);</span><br></pre></td></tr></table></figure><p><em>01 背包的终极形态</em></p><p><code>dp[j] = max(dp[j], dp[j - v[i]] + w[i]) // j 从大往小推</code></p><p>一维dp数组的两个for循环先后循序一定是先遍历物品，再遍历背包容量。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.size(); ++i)</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> 背包容量; j &gt;= w ; --j)    <span class="comment">// 防止越界j &gt;= w</span></span><br><span class="line">        dp[j] = max(dp[j], dp[j - w] + v);</span><br></pre></td></tr></table></figure></p><h2 id="01-背包-——-要求背包必须放满"><a href="#01-背包-——-要求背包必须放满" class="headerlink" title="01 背包 —— 要求背包必须放满"></a>01 背包 —— 要求背包必须放满</h2><p>这个问题可以在 01 背包的基础上改两个地方。</p><ol><li><strong>dp 初始化是要初始化为 -1</strong>,-1 表示方案不可取。同时 dp[0][0] = 0</li><li>状态转移时，dp[i - 1][j - v[i]] + w[i] 要更新进 dp[i][j] 前，先要判断 dp[i - 1][j - v[i]] 是否为 -1，不为 -1，则 dp[i - 1][j - v[i]] 代表的物品组才能放出来</li></ol><p>如果是第一种问法，要求恰好装满背包，那么在初始化时除了F[0]为0，其它F[1..V ]均设为−∞，这样就可以保证最终得到的F[V ]是一种恰好装满背包的最优解。</p><p>如果并没有要求必须把背包装满，而是只希望价格尽量大，初始化时应该将F[0..V ]全部设为0。</p><p>这是为什么呢？可以这样理解：初始化的F数组事实上就是在没有任何物品可以放入背包时的合法状态。如果要求背包恰好装满，那么此时只有容量为0的背包可以在什么也不装且价值为0的情况下被“恰好装满”，其它容量的背包均没有合法的解，属于未定义的状态，应该被赋值为-∞了。如果背包并非必须被装满，那么任何容量的背包都有一个合法解“什么都不装”，这个解的价值为0，所以初始时状态的值也就全部为0了。</p><p>这个小技巧完全可以推广到其它类型的背包问题，后面也就不再对进行状态转移之前的初始化进行讲解。</p><h1 id="完全背包问题"><a href="#完全背包问题" class="headerlink" title="完全背包问题"></a>完全背包问题</h1><p>有 n 种物品，物品 j 的体积为 vj，价值为 wi，有一个体积限制 V。每种物品有无限个，此问题称为 <em>完全背包问题</em>。</p><p>一个朴素的思路是将完全背包强行变成 01 背包：对每个物品 i，都可以求出一个 V/v[i] ，然后就 将物品展开 ，即视为有 V/v[i] 个同样的物品，每个物品有选和不选两种选择。</p><p>但是这种办法复杂度太高了，需要优化。</p><h3 id="1-一个简单有效的优化"><a href="#1-一个简单有效的优化" class="headerlink" title="1) 一个简单有效的优化"></a>1) 一个简单有效的优化</h3><p>若两件物品i、j满足Ci ≤ Cj且Wi ≥ Wj，则将可以将物品j直接去掉，不用考虑。</p><p>首先将费用大于V 的物品去掉，然后使用类似计数排序的做法，计算出费用相同的物品中价值最高的是哪个，可以O(V + N)地完成这个优化。</p><h3 id="2-利用二进制的思想，转化为-01-背包问题求解"><a href="#2-利用二进制的思想，转化为-01-背包问题求解" class="headerlink" title="2) 利用二进制的思想，转化为 01 背包问题求解"></a>2) 利用二进制的思想，转化为 01 背包问题求解</h3><p>略。</p><p>在完全背包中，不论空间是二维，还是优化为一维，两个for循环嵌套顺序同样无所谓！因为dp[j] 是根据 下标j之前所对应的dp[j]计算出来的（左上）。只要保证下标j之前的dp[j]都是经过计算的就可以了。</p><p><em>完全背包的终极形态</em></p><p><code>dp[j] = max(dp[j], dp[j - v[i]] + w[i]) // j 从小往大推</code></p><h1 id="背包组合、排列问题"><a href="#背包组合、排列问题" class="headerlink" title="背包组合、排列问题"></a>背包组合、排列问题</h1><h2 id="组合数：顺序不重要"><a href="#组合数：顺序不重要" class="headerlink" title="组合数：顺序不重要"></a>组合数：顺序不重要</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.size(); i++) &#123; <span class="comment">// 遍历物品</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> nums[i]; j &lt;= amount; j++) &#123; <span class="comment">// 遍历背包容量</span></span><br><span class="line">        dp[j] += dp[j - nums[i]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设：nums[0] = 1，nums[1] = 5。</p><p>那么就是先把1加入计算，然后再把5加入计算，得到的方法数量只有{1, 5}这种情况。而不会出现{5, 1}的情况。</p><p>所以这种遍历顺序中dp[j]里计算的是组合数！</p><h2 id="排列数：顺序重要"><a href="#排列数：顺序重要" class="headerlink" title="排列数：顺序重要"></a>排列数：顺序重要</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= amount; j++) &#123; <span class="comment">// 遍历背包容量</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.size(); i++) &#123; <span class="comment">// 遍历物品</span></span><br><span class="line">        <span class="keyword">if</span> (j - nums[i] &gt;= <span class="number">0</span>) dp[j] += dp[j - nums[i]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>背包容量的每一个值，都是经过 1 和 5 的计算，包含了{1, 5} 和 {5, 1}两种情况。</p><p>此时dp[j]里算出来的就是排列数！</p><p>组合问题举一反三</p><ul><li>组合总和 Ⅳ（本题）</li><li>目标和</li><li>零钱兑换 II</li></ul><h1 id="多重背包问题"><a href="#多重背包问题" class="headerlink" title="多重背包问题"></a>多重背包问题</h1><p>多重背包问题是这样描述的：</p><p>有 n 种物品，物品 j 的体积为 vj，价值为 wi，有一个体积限制 V 。每种物品还有一个 ci，表示每种物品的个数，此问题称为多重背包问题。</p><p>todo</p><h1 id="背包动态规划问题分析步骤"><a href="#背包动态规划问题分析步骤" class="headerlink" title="背包动态规划问题分析步骤"></a>背包动态规划问题分析步骤</h1><p>背包的问题常见的有三种：</p><ol><li>第一个是求最值，这是背包的原始问题，</li><li>第二个是体积要取到背包容量的最值，</li><li>第三个是求方案数，即组合问题。</li></ol><p>背包问题的分析步骤：</p><ol><li>分析是否为背包问题。</li><li>是背包问题三种问法中的哪一种。</li><li>是 0-1 背包问题还是完全背包问题。也就是题目给的 nums 数组中的元素是否可以重复使用。</li><li>如果是组合问题，即求方案数，是否需要考虑元素之间的顺序。需要考虑顺序有顺序的解法，不需要考虑顺序又有对应的解法，需要注意。</li></ol><p><em>习题列表</em></p><ul><li>零钱兑换</li><li>一和零</li><li>最后一块石头的重量 II</li><li><a href="https://www.acwing.com/problem/content/2/">2. 01背包问题</a></li><li><a href="https://www.acwing.com/problem/content/3/">3. 完全背包问题</a></li><li><a href="https://www.acwing.com/problem/content/4/">4. 多重背包问题 I</a></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="01-背包"><a href="#01-背包" class="headerlink" title="01 背包"></a>01 背包</h2><p><em>01 背包的递推公式</em></p><p><code>dp[j] = max(dp[j], dp[j - v[i]] + w[i]) // j 从大往小推</code></p><p>一维dp数组的两个for循环先后循序一定是先遍历物品，再遍历背包容量。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.size(); ++i)</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> 背包容量; j &gt;= w ; --j)    <span class="comment">// 防止越界j &gt;= w</span></span><br><span class="line">        dp[j] = max(dp[j], dp[j - w] + v);</span><br></pre></td></tr></table></figure></p><p><em>01 背包：要求背包必须放满</em></p><ol><li><strong>dp 初始化是要初始化为 -1</strong>,-1 表示方案不可取。同时 dp[0][0] = 0</li><li>状态转移时，dp[i - 1][j - v[i]] + w[i] 要更新进 dp[i][j] 前，先要判断 dp[i - 1][j - v[i]] 是否为 -1，不为 -1，则 dp[i - 1][j - v[i]] 代表的物品组才能放出来</li></ol><h2 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h2><p><em>01 背包的递推公式</em></p><p><code>dp[j] = max(dp[j], dp[j - v[i]] + w[i]) // j 从小往大推</code></p><h2 id="多重背包"><a href="#多重背包" class="headerlink" title="多重背包"></a>多重背包</h2><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://leetcode.cn/problems/gaM7Ch/solutions/1501710/by-flix-7gza/">『 一文搞懂完全背包问题 』从0-1背包到完全背包，逐层深入+数学推导</a></li></ul>]]></content>
    
    
    <summary type="html">本文主要解释 0-1 背包相关的问题。</summary>
    
    
    
    <category term="技术" scheme="https://luorongluorong.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="算法" scheme="https://luorongluorong.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="动态规划" scheme="https://luorongluorong.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="背包问题" scheme="https://luorongluorong.github.io/tags/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    
    <category term="NP完全问题" scheme="https://luorongluorong.github.io/tags/NP%E5%AE%8C%E5%85%A8%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Git 规范</title>
    <link href="https://luorongluorong.github.io/2022/06/02/commands/git/"/>
    <id>https://luorongluorong.github.io/2022/06/02/commands/git/</id>
    <published>2022-06-02T11:21:41.000Z</published>
    <updated>2023-03-21T04:38:16.995Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git-规范"><a href="#Git-规范" class="headerlink" title="Git 规范"></a>Git 规范</h1><p>为什么Git比其他版本控制系统设计得优秀，因为Git跟踪并管理的是修改，而非文件。</p><h2 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h2><p>分支：master分支，每个任务一个分支（注意.gitignore）</p><ul><li>fix：修复了bug</li><li>docs：只修改了文档</li><li>style：调整代码格式，未修改代码逻辑（比如修改空格、格式化、缺少分号等）</li><li>refactor：代码重构，既没修复bug也没有添加新功能</li><li>perf：性能优化，提高性能的代码更改</li><li>test：添加或修改代码测试</li><li>chore：对构建流程或辅助工具和依赖库（如文档生成等）的更改</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--pretty=oneline: commit 信息展示为行</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--abbrev-commit: 仅显示 commit <span class="built_in">id</span> 的前几个标识符</span></span><br><span class="line">git log --pretty=oneline --abbrev-commit</span><br></pre></td></tr></table></figure><h2 id="add"><a href="#add" class="headerlink" title="add"></a>add</h2><p>git add的反向命令git checkout，撤销工作区修改，即把暂存区最新版本转移到工作区，</p><p>git commit的反向命令git reset HEAD，就是把仓库最新版本转移到暂存区。</p><h2 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h2><p><code>手动删除文件，然后使用git add &lt;file&gt;</code>和<code>git rm &lt;file&gt;</code>效果是一样的。</p><p>有时候，发现有不该提交的文件已经提交后，仅仅在<code>.gitignore</code>中加入忽略是不行的。这个时候需要执行:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached [被回收的文件]</span><br></pre></td></tr></table></figure><p>去掉已经托管的文件，然后重新提交：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &#x27;&#x27;</span><br></pre></td></tr></table></figure><p>注意！<code>git rm -r --cached 文件/文件夹名字</code> 是高危操作，一定要指定文件名不能不写，否则 <code>git rm -r --cached</code> 会删除所有缓存，包括本地未提交的文件。</p><h2 id="branch"><a href="#branch" class="headerlink" title="branch"></a>branch</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到旧分支</span></span><br><span class="line">git checkout oldBranch</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建并切换至新分支</span></span><br><span class="line">git checkout -b luorong </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">最新版本的Git提供了新的git switch命令来切换分支：</span></span><br><span class="line">git switch -c 新的分支名</span><br><span class="line">git switch 已有的分支名</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新分支代码并提交</span></span><br><span class="line">git add *</span><br><span class="line">git commit -m &quot;init newBranch&quot;</span><br><span class="line">git push origin newBranch</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看所有分支</span></span><br><span class="line">git branch -a</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前使用分支（结果列表前面*号，代表当前使用的分支)</span></span><br><span class="line">git branch</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">合并分支</span></span><br><span class="line">git merge 分支名</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除分支</span></span><br><span class="line">git branch -d 分支名</span><br><span class="line">git branch -D 分支名  # 强行删除</span><br></pre></td></tr></table></figure><h2 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h2><p>通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。</p><p>如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。</span></span><br><span class="line">git merge --no-ff -m &quot;merge with no-ff&quot; dev</span><br></pre></td></tr></table></figure><p>合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。</p><h2 id="restore"><a href="#restore" class="headerlink" title="restore"></a>restore</h2><p>执行 ADD 后</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git restore --staged [file] : 表示从暂存区将文件的状态修改成 unstage 状态。当然，也可以不指定确切的文件 ，例如：</span><br><span class="line">git restore --staged *.java 表示将所有暂存区的java文件恢复状态</span><br><span class="line">git restore --staged . 表示将当前目录所有暂存区文件恢复状态</span><br><span class="line">--staged 参数就是表示仅仅恢复暂存区的</span><br></pre></td></tr></table></figure><h2 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h2><p>虽然Git告诉我们readme.txt被修改了，但如果能看看具体修改了什么内容，自然是很好的。比如你休假两周从国外回来，第一天上班时，已经记不清上次怎么修改的readme.txt，所以，需要用git diff这个命令看看：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff 文件名</span><br></pre></td></tr></table></figure></p><p>git diff 时是分为两种情况的：暂存区为空和暂存区不为空。</p><p>首先我们明确知道git diff是比较工作区和暂存区的文件的，如果此时暂存区为空，那么稍微有点不同，即：</p><p>1 暂存区为空使用git diff：因为此时暂存区为空，此时使用git diff同样也是比较工作区和仓库，即和使用git diff HEAD结果相同</p><p>2 暂存区不为空使用git diff:因为此时暂存区不为空，此时使用git diff比较的就是工作区和暂存区</p><h2 id="reset-回退到某个版本"><a href="#reset-回退到某个版本" class="headerlink" title="reset: 回退到某个版本"></a>reset: 回退到某个版本</h2><p>首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交1094adb…（注意我的提交ID和你的肯定不一样），上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个^比较容易数不过来，所以写成<code>HEAD~100</code>。</p><p>现在，我们要把当前版本append GPL回退到上一个版本，就可以使用<code>git reset</code>命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br></pre></td></tr></table></figure><p>Git的版本回退速度非常快，因为Git在内部有个指向当前版本的HEAD指针，当你回退版本的时候，Git仅仅是把HEAD从指向append GPL</p><p><code>git reflog</code>用来记录你的每一次命令。</p><p><strong>现在总结一下：</strong></p><ul><li><p>HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset —hard commit_id。</p></li><li><p>穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。</p></li><li><p>要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本</p></li></ul><p>注意：这里不会保存 add 后的文件。所以要用 stash。</p><h2 id="更新-commit-的信息"><a href="#更新-commit-的信息" class="headerlink" title="更新 commit 的信息"></a>更新 commit 的信息</h2><p>经常 commit 错误信息。如何修改？分为如下三种情况：</p><ol><li>刚刚 commit，还没有 push，使用 git commit —amend;</li><li>刚刚 push，要修改最近一个 push 的commit信息，使用 git commit —amend；</li><li>修改历史 push 的 commit 信息，使用 git rebase -i HEAD~n【其中的n为记录数】，配合2中的命令</li></ol><h2 id="stash-把当前工作现场“储藏”起来，等以后恢复现场后继续工作"><a href="#stash-把当前工作现场“储藏”起来，等以后恢复现场后继续工作" class="headerlink" title="stash: 把当前工作现场“储藏”起来，等以后恢复现场后继续工作"></a>stash: 把当前工作现场“储藏”起来，等以后恢复现场后继续工作</h2><p>出现一个 bug，但是工作只进行到一半，还没法提交，预计完成还需1天时间。但是，必须在两个小时内修复该bug，怎么办？</p><p>Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">保存当前分支 dev 的内容</span></span><br><span class="line">git stash </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">回到主分支，新建 bug 修复分支，修复 bug，回到主分支，merge 后回到 dev 分支</span></span><br><span class="line">git switch master</span><br><span class="line">git checkout -b issue-101</span><br><span class="line">git add fixbug.txt</span><br><span class="line">git commit -m &quot;fix bug 101&quot;</span><br><span class="line">git switch master</span><br><span class="line">git merge --no-ff -m &quot;merge bug fix 101&quot; issue-101</span><br><span class="line">git switch dev</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看工作现场</span></span><br><span class="line">git stash list</span><br><span class="line">git stash apply stash@&#123;0&#125; # 第一种恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删</span><br><span class="line">git stash pop             # 第二种恢复，恢复的同时把stash内容也删了</span><br></pre></td></tr></table></figure><p>在master分支上修复了bug后，我们要想一想，dev分支是早期从master分支分出来的，所以，这个bug其实在当前dev分支上也存在。</p><p>那怎么在dev分支上修复同样的bug？Git专门提供了一个<code>cherry-pick</code>命令，让我们能复制一个特定的提交到当前分支</p><h2 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打标签：git tag 标签名 commitId</span></span><br><span class="line">git tag v0.9 f52c633</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-a指定标签名，-m指定说明文字</span></span><br><span class="line">git tag -a v0.1 -m &quot;version 0.1 released&quot; 1094adb</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看标签，标签不是按时间顺序列出，而是按字母排序的</span></span><br><span class="line">git tag</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看标签的详细信息</span></span><br><span class="line">git show 标签名</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除标签：</span></span><br><span class="line">git tag -d v0.1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">推送某个标签到远程</span></span><br><span class="line">git push origin &lt;tagname&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">一次性推送全部尚未推送到远程的本地标签</span></span><br><span class="line">git push origin --tags</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li>廖雪峰的 Git 教程</li><li>阿里巴巴 Git commit 规范</li></ul>]]></content>
    
    
    <summary type="html">记录 git 常用的命令。</summary>
    
    
    
    <category term="技术" scheme="https://luorongluorong.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Git" scheme="https://luorongluorong.github.io/tags/Git/"/>
    
    <category term="命令" scheme="https://luorongluorong.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>操作系统：内存回收算法</title>
    <link href="https://luorongluorong.github.io/2022/05/11/bases/os_lru/"/>
    <id>https://luorongluorong.github.io/2022/05/11/bases/os_lru/</id>
    <published>2022-05-11T02:16:35.000Z</published>
    <updated>2023-04-11T03:02:55.740Z</updated>
    
    <content type="html"><![CDATA[<p>系统内存紧张的时候，就会进行回收内存的工作。主要有<strong>文件页</strong>和<strong>匿名页</strong>两种内存可以回收。文件页和匿名页的回收都是基于 LRU 算法，也就是优先回收不常访问的内存。</p><h1 id="LRU-最近最少使用-缓存"><a href="#LRU-最近最少使用-缓存" class="headerlink" title="LRU (最近最少使用) 缓存"></a>LRU (最近最少使用) 缓存</h1><p>LRU 的实现是一个哈希表加上一个双链表。</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>我个人觉得最核心的一点是 <code>records.remove(removedNode.key);</code> 这一行代码，要从哈希表中删除被淘汰的元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LRU 的 Java 实现</span></span><br><span class="line"><span class="comment">// https://leetcode.cn/problems/lru-cache/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LRUCache</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> size;  <span class="comment">// 真实大小</span></span><br><span class="line">    <span class="type">int</span> capacity;  <span class="comment">// 最大容量</span></span><br><span class="line">    Node head;</span><br><span class="line">    Node tail;</span><br><span class="line"></span><br><span class="line">    Map&lt;Integer, Node&gt; records;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LRUCache</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">        <span class="built_in">this</span>.size = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.head = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">        <span class="built_in">this</span>.tail = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">        <span class="built_in">this</span>.head.next = <span class="built_in">this</span>.tail;</span><br><span class="line">        <span class="built_in">this</span>.tail.prev = <span class="built_in">this</span>.head;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.records = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!records.containsKey(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> records.get(key);</span><br><span class="line">        moveToHead(node);</span><br><span class="line">        <span class="keyword">return</span> node.val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!records.containsKey(key)) &#123;</span><br><span class="line">            <span class="comment">// 节点不存在</span></span><br><span class="line">            <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(key, value);</span><br><span class="line">            records.put(key, node);</span><br><span class="line">            size++;</span><br><span class="line">            addToHead(node);</span><br><span class="line">            <span class="keyword">if</span> (size &gt; capacity) &#123;</span><br><span class="line">                <span class="type">Node</span> <span class="variable">removedNode</span> <span class="operator">=</span> removeTail();</span><br><span class="line">                records.remove(removedNode.key);</span><br><span class="line">                size--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 节点存在</span></span><br><span class="line">            <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> records.get(key);</span><br><span class="line">            node.val = value;</span><br><span class="line">            moveToHead(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">moveToHead</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        removeNode(node);</span><br><span class="line">        addToHead(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">removeNode</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        node.next.prev = node.prev;</span><br><span class="line">        node.prev.next = node.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addToHead</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        node.next = <span class="built_in">this</span>.head.next;</span><br><span class="line">        node.prev = <span class="built_in">this</span>.head;</span><br><span class="line">        <span class="built_in">this</span>.head.next = node;</span><br><span class="line">        node.next.prev = node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node <span class="title function_">removeTail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="built_in">this</span>.tail.prev;</span><br><span class="line">        <span class="built_in">this</span>.tail.prev = node.prev;</span><br><span class="line">        node.prev.next = <span class="built_in">this</span>.tail;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> key;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line"></span><br><span class="line">    Node prev;</span><br><span class="line">    Node next;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">()</span> &#123; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">        <span class="built_in">this</span>.val = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如何改进-LRU-算法"><a href="#如何改进-LRU-算法" class="headerlink" title="如何改进 LRU 算法"></a>如何改进 LRU 算法</h2><p>传统的 LRU 算法存在这两个问题：</p><ul><li>「预读失效」导致缓存命中率下降。（OS 在读磁盘时会额外多读一些数据，但是最后这些数据并没有被用到）</li><li>「缓存污染」导致缓存命中率下降。（批量读数据可能会把热点数据挤出去）<br>Redis 的缓存淘汰算法则是通过实现 LFU 算法来避免「缓存污染」而导致缓存命中率下降的问题（Redis 没有预读机制）。</li></ul><p>MySQL 和 Linux 操作系统是通过改进 LRU 算法来避免「预读失效和缓存污染」而导致缓存命中率下降的问题。</p><p>本节重点讲讲 MySQL 和 Linux 操作系统是如何改进 LRU 算法的。</p><h3 id="预读失效"><a href="#预读失效" class="headerlink" title="预读失效"></a>预读失效</h3><p><strong>预读机制</strong>使得内核从磁盘加载页时，会提前把它相邻的页一并加载进来，目的是为了减少磁盘 IO。</p><p><strong>预读失效</strong>是如果这些被提前加载进来的页，并没有被访问。</p><p>要避免预读失效带来影响，最好就是让预读页停留在内存里的时间要尽可能的短，让真正被访问的页才移动到 LRU 链表的头部，从而保证真正被读取的热数据留在内存里的时间尽可能长。</p><p>Linux 操作系统实现两个了 LRU 链表：活跃 LRU 链表（active_list）和非活跃 LRU 链表（inactive_list）；从而将数据分为了冷数据和热数据，然后分别进行 LRU 算法。</p><ul><li>active list 活跃内存页链表，这里存放的是最近被访问过（活跃）的内存页；</li><li>inactive list 不活跃内存页链表，这里存放的是很少被访问（非活跃）的内存页；</li></ul><h3 id="缓存污染"><a href="#缓存污染" class="headerlink" title="缓存污染"></a>缓存污染</h3><p>如果还是使用「只要数据被访问一次，就将数据加入到活跃 LRU 链表头部（或者 young 区域）」这种方式的话，那么还存在<strong>缓存污染</strong>的问题。</p><p>例如，当我们在批量读取数据的时候，由于数据被访问了一次，这些大量数据都会被加入到「活跃 LRU 链表」里，然后之前缓存在活跃 LRU 链表（或者 young 区域）里的热点数据全部都被淘汰了，如果这些大量的数据在很长一段时间都不会被访问的话，那么整个活跃 LRU 链表（或者 young 区域）就被污染了。</p><p>注意， 缓存污染并不只是查询语句查询出了大量的数据才出现的问题，即使查询出来的结果集很小，也会造成缓存污染。</p><p>例如，MySQL 在进行全表扫描查询（结果集很小）的时候，从磁盘中读到页并加载到 LRU 链表中，替换掉了热点数据，造成缓存污染。</p><p>所以，只要我们提高进入到活跃 LRU 链表（或者 young 区域）的门槛，就能有效地保证活跃 LRU 链表（或者 young 区域）里的热点数据不会被轻易替换掉。</p><p>Linux 操作系统在<strong>内存页被访问第二次的时候，才将页从 inactive list 升级到 active list 里</strong>。这样做很好地避免缓存污染带来的影响。</p><h1 id="LFU-最不经常使用缓存算法"><a href="#LFU-最不经常使用缓存算法" class="headerlink" title="LFU (最不经常使用缓存算法)"></a>LFU (最不经常使用缓存算法)</h1><p>缓存的淘汰算法：</p><ul><li>LRU(Least Recently Used) 最近最少使用算法，它是根据时间维度来选择将要淘汰的元素，即删除掉最长时间没被访问的元素。</li><li>LFU(Least Frequently Used) 最近最不常用算法，它是根据频率维度来选择将要淘汰的元素，即删除访问频率最低的元素。如果两个元素的访问频率相同，则淘汰最久没被访问的元素。</li></ul><p>也就是说LFU淘汰的时候会选择两个维度，先比较频率，选择访问频率最小的元素；如果频率相同，则按时间维度淘汰掉最久远的那个元素。</p><h2 id="LFU-的实现是基于两个哈希表"><a href="#LFU-的实现是基于两个哈希表" class="headerlink" title="LFU 的实现是基于两个哈希表"></a>LFU 的实现是基于两个哈希表</h2><p>LRU的实现是一个哈希表加上一个双链表；而LFU则要复杂多了，需要用两个哈希表再加上N个双链表才能实现。</p><ul><li>第一个哈希表是key-value的哈希表<ul><li>key: 输入的key</li><li>value: 节点对象Node包含了key，value，以及频率</li></ul></li><li>第二张哈希表是频率哈希表<ul><li>key：频率，即节点被访问的次数</li><li>value: 双向链表</li></ul></li></ul><h2 id="get-操作"><a href="#get-操作" class="headerlink" title="get 操作"></a>get 操作</h2><p>get操作的具体逻辑大致是这样：</p><ul><li>如果key不存在则返回-1</li><li>如果key存在，则返回对应的value，同时:<ul><li>将元素的访问频率+1<ul><li>将元素从访问频率i的链表中移除，放到频率i+1的链表中</li><li>如果频率i的链表为空，则从频率哈希表中移除这个链表</li></ul></li></ul></li></ul><h2 id="put-操作"><a href="#put-操作" class="headerlink" title="put 操作"></a>put 操作</h2><p>put操作就要复杂多了，大致包括下面几种情况</p><ul><li>如果key已经存在，修改对应的value，并将访问频率+1<ul><li>将元素从访问频率i的链表中移除，放到频率i+1的链表中</li><li>如果频率i的链表为空，则从频率哈希表中移除这个链表</li></ul></li><li>如果key不存在<ul><li>缓存超过最大容量，则先删除访问频率最低的元素，再插入新元素<ul><li>新元素的访问频率为1，如果频率哈希表中不存在对应的链表需要创建</li></ul></li><li>缓存没有超过最大容量，则插入新元素<ul><li>新元素的访问频率为1，如果频率哈希表中不存在对应的链表需要创建</li></ul></li></ul></li></ul><p>我们在代码实现中还需要维护一个minFreq的变量，用来记录LFU缓存中频率最小的元素，在缓存满的时候，可以快速定位到最小频繁的链表，以达到 O(1) 时间复杂度删除一个元素。 具体做法是:</p><ul><li>更新/查找的时候，将元素频率+1，之后如果minFreq不在频率哈希表中了，说明频率哈希表中已经没有元素了，那么minFreq需要+1，否则minFreq不变。</li><li>插入的时候，这个简单，因为新元素的频率都是1，所以只需要将minFreq改为1即可。</li></ul><h2 id="具体实现-1"><a href="#具体实现-1" class="headerlink" title="具体实现"></a>具体实现</h2><p>参考如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *    自定义的LFU缓存类 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LFUCache</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *    双链表中的链表节点对象</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">        <span class="comment">//对应输入的key</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> key;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对应输入的value</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> value;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//被访问的频率</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> freq;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//指向前一个节点的指针</span></span><br><span class="line">        <span class="keyword">protected</span> Node pre;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//指向后一个节点的指针</span></span><br><span class="line">        <span class="keyword">protected</span> Node next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value, <span class="type">int</span> freq)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">            <span class="built_in">this</span>.freq = freq;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value, <span class="type">int</span> freq, Node pre, Node next)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">            <span class="built_in">this</span>.freq = freq;</span><br><span class="line">            <span class="built_in">this</span>.pre = <span class="literal">null</span>;</span><br><span class="line">            <span class="built_in">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateValue</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">incrFreq</span><span class="params">()</span> &#123;</span><br><span class="line">            ++<span class="built_in">this</span>.freq;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getKey</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.key;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getFreq</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.freq;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Node <span class="title function_">createEmptyNode</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Node</span>(-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  自定义的双向链表类</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">LinkedList</span> &#123;</span><br><span class="line">        <span class="comment">//双向链表的头结点</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Node head;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//双向链表的尾节点</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Node tail;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">LinkedList</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.head = Node.createEmptyNode();</span><br><span class="line">            <span class="built_in">this</span>.tail = Node.createEmptyNode();</span><br><span class="line">            <span class="built_in">this</span>.head.next = <span class="built_in">this</span>.tail;</span><br><span class="line">            <span class="built_in">this</span>.tail.pre = <span class="built_in">this</span>.head;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 将指定的节点插入到链表的第一个位置</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> node 将要插入的节点</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFirst</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(node==<span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            node.next = <span class="built_in">this</span>.head.next;</span><br><span class="line">            <span class="built_in">this</span>.head.next.pre = node;</span><br><span class="line">            node.pre = <span class="built_in">this</span>.head;</span><br><span class="line">            <span class="built_in">this</span>.head.next = node;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 从链表中删除指定的节点</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> node 将要删除的节点</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteNode</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(node==<span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            node.pre.next = node.next;</span><br><span class="line">            node.next.pre = node.pre;</span><br><span class="line">            node.pre = <span class="literal">null</span>;</span><br><span class="line">            node.next = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 从链表中获取最后一个节点</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> 双向链表中的最后一个节点，如果是空链表则返回None</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">public</span> Node <span class="title function_">getLastNode</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">this</span>.head.next==<span class="built_in">this</span>.tail) &#123;</span><br><span class="line">                <span class="keyword">return</span> Node.createEmptyNode();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.tail.pre;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 判断链表是否为空，除了head和tail没有其他节点即为空链表</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> 链表不空返回True，否则返回False</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.head.next==<span class="built_in">this</span>.tail;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//key-&gt;Node 这种结构的哈希表</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Integer,Node&gt; keyMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer,Node&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//freq-&gt;LinkedList 这种结构的哈希表</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Integer,LinkedList&gt; freqMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer,LinkedList&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//缓存的最大容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//记录缓存中最低频率</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">minFreq</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LFUCache</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line"><span class="comment">//if(capacity&lt;=0) &#123;</span></span><br><span class="line"><span class="comment">//throw new IllegalArgumentException();</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取一个元素，如果key不存在则返回-1，否则返回对应的value，同时更新被访问元素的频率</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 要查找的关键字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果没找到则返回-1，否则返回对应的value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">this</span>.keyMap.containsKey(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="built_in">this</span>.keyMap.get(key);</span><br><span class="line">        <span class="built_in">this</span>.increment(node);</span><br><span class="line">        <span class="keyword">return</span> node.getValue();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入指定的key和value，如果key存在则更新value，同时更新频率，</span></span><br><span class="line"><span class="comment">     * 如果key不存并且缓存满了，则删除频率最低的元素，并插入新元素。否则，直接插入新元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 要插入的关键字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 要插入的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.keyMap.containsKey(key)) &#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="built_in">this</span>.keyMap.get(key);</span><br><span class="line">            node.updateValue(value);</span><br><span class="line">            <span class="built_in">this</span>.increment(node);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">this</span>.capacity==<span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">this</span>.keyMap.size()==<span class="built_in">this</span>.capacity) &#123;</span><br><span class="line">                <span class="built_in">this</span>.remoteMinFreqNode();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(key,value,<span class="number">1</span>);</span><br><span class="line">            <span class="built_in">this</span>.increment(node,<span class="literal">true</span>);</span><br><span class="line">            <span class="built_in">this</span>.keyMap.put(key, node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新节点的访问频率</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node 要更新的节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        increment(node,<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新节点的访问频率</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node 要更新的节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isNewNode 是否是新节点，新插入的节点和非新插入节点更新逻辑不同</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">(Node node,<span class="type">boolean</span> isNewNode)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(isNewNode) &#123;</span><br><span class="line">            <span class="built_in">this</span>.minFreq = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">this</span>.insertToLinkedList(node);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.deleteNode(node);</span><br><span class="line">            node.incrFreq();</span><br><span class="line">            <span class="built_in">this</span>.insertToLinkedList(node);</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">this</span>.freqMap.containsKey(<span class="built_in">this</span>.minFreq)) &#123;</span><br><span class="line">                ++<span class="built_in">this</span>.minFreq;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据节点的频率，插入到对应的LinkedList中，如果LinkedList不存在则创建</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node 将要插入到LinkedList的节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">insertToLinkedList</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">this</span>.freqMap.containsKey(node.getFreq())) &#123;</span><br><span class="line">            <span class="built_in">this</span>.freqMap.put(node.getFreq(), <span class="keyword">new</span> <span class="title class_">LinkedList</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">LinkedList</span> <span class="variable">linkedList</span> <span class="operator">=</span> <span class="built_in">this</span>.freqMap.get(node.getFreq());</span><br><span class="line">        linkedList.insertFirst(node);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除指定的节点，如果节点删除后，对应的双链表为空，则从__freqMap中删除这个链表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node 将要删除的节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">deleteNode</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        <span class="type">LinkedList</span> <span class="variable">linkedList</span> <span class="operator">=</span> <span class="built_in">this</span>.freqMap.get(node.getFreq());</span><br><span class="line">        linkedList.deleteNode(node);</span><br><span class="line">        <span class="keyword">if</span>(linkedList.isEmpty()) &#123;</span><br><span class="line">            <span class="built_in">this</span>.freqMap.remove(node.getFreq());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除频率最低的元素，从freqMap和keyMap中都要删除这个节点，</span></span><br><span class="line"><span class="comment">     * 如果节点删除后对应的链表为空，则要从__freqMap中删除这个链表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">remoteMinFreqNode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">LinkedList</span> <span class="variable">linkedList</span> <span class="operator">=</span> <span class="built_in">this</span>.freqMap.get(<span class="built_in">this</span>.minFreq);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> linkedList.getLastNode();</span><br><span class="line">        linkedList.deleteNode(node);</span><br><span class="line">        <span class="built_in">this</span>.keyMap.remove(node.getKey());</span><br><span class="line">        <span class="keyword">if</span>(linkedList.isEmpty()) &#123;</span><br><span class="line">            <span class="built_in">this</span>.freqMap.remove(node.getFreq());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// https://leetcode.cn/problems/lfu-cache/solutions/210980/chao-xiang-xi-tu-jie-dong-tu-yan-shi-460-lfuhuan-c/</span></span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://xiaolincoding.com/os/3_memory/cache_lru.html">如何避免预读失效和缓存污染的问题？</a></li><li><a href="https://leetcode.cn/problems/lfu-cache/solutions/210980/chao-xiang-xi-tu-jie-dong-tu-yan-shi-460-lfuhuan-c/">超详细图解+动图演示 LFU缓存</a></li></ul>]]></content>
    
    
    <summary type="html">系统内存紧张的时候，就会进行回收内存的工作。文件页和匿名页的回收都是基于 LRU 算法，也就是优先回收不常访问的内存。</summary>
    
    
    
    <category term="技术" scheme="https://luorongluorong.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="LRU" scheme="https://luorongluorong.github.io/tags/LRU/"/>
    
    <category term="LFU" scheme="https://luorongluorong.github.io/tags/LFU/"/>
    
    <category term="内存" scheme="https://luorongluorong.github.io/tags/%E5%86%85%E5%AD%98/"/>
    
    <category term="缓存" scheme="https://luorongluorong.github.io/tags/%E7%BC%93%E5%AD%98/"/>
    
    <category term="操作系统" scheme="https://luorongluorong.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Vue3 + Element3 学习过程简单记录</title>
    <link href="https://luorongluorong.github.io/2022/03/21/practices/vue3_elementplus/"/>
    <id>https://luorongluorong.github.io/2022/03/21/practices/vue3_elementplus/</id>
    <published>2022-03-21T10:19:19.000Z</published>
    <updated>2023-03-31T15:30:41.949Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue3-Element3-学习过程简单记录"><a href="#Vue3-Element3-学习过程简单记录" class="headerlink" title="Vue3 + Element3 学习过程简单记录"></a>Vue3 + Element3 学习过程简单记录</h1><blockquote><p>两周前，师兄要我完成一个前端的任务。因此我选择了较为熟悉的前端框架 Vue3 和配套的 UI 框架 ElementPlus，原型设计工具是 Figma。我最终实现的界面如下所示：</p></blockquote><p> <img src="/static/practices/vue3_results.png" alt="front_result"></p><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><h3 id="1-1-框架选择原因"><a href="#1-1-框架选择原因" class="headerlink" title="1.1 框架选择原因"></a>1.1 框架选择原因</h3><h4 id="1-选择-Vue3-的原因有如下几点："><a href="#1-选择-Vue3-的原因有如下几点：" class="headerlink" title="(1) 选择 Vue3 的原因有如下几点："></a>(1) 选择 Vue3 的原因有如下几点：</h4><ul><li>方便搭建。依照官方给出的<a href="https://v3.cn.vuejs.org/guide/installation.html">安装教程</a>，</li><li>上手简单。只需要会一些 JavaScript 等前端开发的基础知识。</li><li>轻量级。越简单越好，这是我们的项目需求使然。我们的目标是创建一个简单的前端搜索和展示页面，不需要进行页面之间的跳转。虽然像 Vue 这样的框架构建的网页本质上就是单页面，但实际上对于复杂项目来说，Vue 也需要进行许多代码的编写。</li></ul><p>在可视化前端中，除了像 Vue 和 Angular 这样的前端框架之外，还有 D3 这种小巧的 js 库。由于我对 D3 不熟悉，所以我最终还是选择了 Vue。<br>由于 Vue3 相对 Vue2 来说更加新，所以 Vue3 的教程会相对来说少一些，面对一些 Error 什么的，还是不好弄。</p><h4 id="2-选择-ElementPlus-的原因有如下几点："><a href="#2-选择-ElementPlus-的原因有如下几点：" class="headerlink" title="(2) 选择 ElementPlus 的原因有如下几点："></a>(2) 选择 ElementPlus 的原因有如下几点：</h4><ul><li>和 Vue3 配套。</li><li>有许多方便使用的组件。</li><li>风格统一。</li></ul><p>当然，Element 存在许多便捷的组件，这也意味着它的灵活性大大降低。我在开发的过程中，花费了 60% 的时间调整组件带给我的不灵活之处。</p><h3 id="1-2-个人习惯"><a href="#1-2-个人习惯" class="headerlink" title="1.2 个人习惯"></a>1.2 个人习惯</h3><p>英文报错搜<strong>谷歌</strong>，谷歌搜不到就搜 ElementPlus 在 Github 的 <strong><a href="https://github.com/element-plus/element-plus/issues">issues</a></strong>。除了本次项目我尝试使用 issues 来进行调试外，在使用很多其他开源项目时，如果我们碰到 BUG 或者一些安装方面的问题，我们都可以尝试去项目的 issues 部分进行查询或者直接提问。一般而言，生命力比较旺盛的开源项目都会有工作人员进行维护。在这里就不吐槽那些为了发论文所以开放项目地址但从不回应 issues 的人。</p><p>代码的基本写法搜<strong>必应</strong>，必应搜不到就转换成英文搜<strong>谷歌</strong>。鉴于我很长时间没有使用过 JavaScript 了，很多基本的数据结构的增删改查我不会使用，连循环都不会。中文版本的<strong>菜鸟教程</strong>和 <strong>w3cschool</strong> 以及少量的 CSDN 就可以满足我的需求。虽然我一直骂 CSDN 坑人，但我目前搜中文编程的一些基础资料还是会偶尔参考一下 CSDN。</p><h3 id="1-3-前端原型"><a href="#1-3-前端原型" class="headerlink" title="1.3 前端原型"></a>1.3 前端原型</h3><p>我师兄使用 <strong><a href="https://www.figma.com/">Figma</a></strong> 画的原型。我师兄是个大佬，但是他很谦虚，认为自己是个小虾米。我根据他画的前端原型来进行前端的实现。在代码实现的过程中，如果需要修改需求，我们就会使用 Figma 对界面进行了微调，辅助我们进行需求的确认。</p><h3 id="1-4-安装"><a href="#1-4-安装" class="headerlink" title="1.4 安装"></a>1.4 安装</h3><p>虽然安装不是重点，但是我想有必要补充一下我的安装过程，以免未来遗忘。</p><h4 id="0-在不安装-Vue3-的脚手架的情况下创建-Vue-应用（Vite-安装）"><a href="#0-在不安装-Vue3-的脚手架的情况下创建-Vue-应用（Vite-安装）" class="headerlink" title="(0) 在不安装 Vue3 的脚手架的情况下创建 Vue 应用（Vite 安装）"></a>(0) 在不安装 Vue3 的脚手架的情况下创建 Vue 应用（Vite 安装）</h4><blockquote><p>2022-11-17 更新：<a href="https://cn.vuejs.org/guide/quick-start.html#creating-a-vue-application">Vue3 官网 Vite 安装方式</a>。</p></blockquote><p>在安装好 npm 后，运行 <code>npm init vue@latest</code> 命令即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">npm init vue@latest</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输入项目名称 cdtfront</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">... 安装过程略，没有特殊需求的话，一路按 enter 即可。</span></span><br><span class="line">cd cdtfront</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br><span class="line">npm run serve  # 运行项目</span><br><span class="line">npm run build  # 服务器部署所需</span><br></pre></td></tr></table></figure><p><img src="/static/practices/vue3_create_project.png" alt="vue3_create_project"></p><h4 id="1-准备（脚手架安装）"><a href="#1-准备（脚手架安装）" class="headerlink" title="(1) 准备（脚手架安装）"></a>(1) 准备（脚手架安装）</h4><p>以 Linux 版本为例。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">已经有 node。没有 Node.js 则需要先装 Node.js</span></span><br><span class="line">sudo apt get npm  # 安装 npm</span><br><span class="line">sudo npm install -g @vue/cli  # 安装 Vue3 的脚手架</span><br></pre></td></tr></table></figure><p>由于原系统环境中安装了 Vue2 的脚手架，所以需要进行下述命令来重新安装 Vue3：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo npm cache clean -f</span><br><span class="line">sudo npm install -g n</span><br><span class="line">sudo n stable</span><br><span class="line">sudo npm install -g @vue/cli</span><br></pre></td></tr></table></figure><p>对于上面的命令，有必要解释部分词汇。</p><p>首先，按照 <a href="https://nodejs.org/en/">Node.js 官网</a> 的定义“Node.js® is a JavaScript runtime built on Chrome’s V8 JavaScript engine. ” 用我师兄的话来说，Node.js 相当于为 JavaScript 提供了运行环境，类似于 Java 的 JVM。如果没有 Node.js，JavaScript 的运行必须依赖以 Chrome 内核为典型代表的浏览器引擎；有了 Node.js，开发人员不仅可以使用 JavaScript 来撰写前端，也可以使用 JavaScript 来撰写后端等，从而进行全栈开发。</p><p>其次，npm 是一个包管理工具，类似 Python 的 pip。</p><p>我的版本情况如下所示:</p><p><img src="./static/practices/vue3_version.png" alt="version"></p><h4 id="2-创建项目（脚手架安装）"><a href="#2-创建项目（脚手架安装）" class="headerlink" title="(2) 创建项目（脚手架安装）"></a>(2) 创建项目（脚手架安装）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vue create tool  <span class="comment"># 创建名为 tool 的 Vue3 项目</span></span><br><span class="line"><span class="built_in">cd</span> tool  <span class="comment"># 进入到新创建的 tool 项目中</span></span><br><span class="line">npm install @element-plus/icons-vue  <span class="comment"># 安装 element-plus</span></span><br></pre></td></tr></table></figure><h4 id="3-运行项目"><a href="#3-运行项目" class="headerlink" title="(3) 运行项目"></a>(3) 运行项目</h4><p>我们运行 Vue 项目需要熟知如下三个命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install  <span class="comment"># 安装 package.json 中罗列的包，文件夹下出现一个名为 node_moudule 的包，打开里面可以看到许多 JavaScript 和 TypeScript 代码</span></span><br><span class="line">npm run serve  <span class="comment"># 运行项目</span></span><br><span class="line">npm run build  <span class="comment"># 服务器部署所需</span></span><br></pre></td></tr></table></figure><h4 id="4-Windows-版本（脚手架安装）"><a href="#4-Windows-版本（脚手架安装）" class="headerlink" title="(4) Windows 版本（脚手架安装）"></a>(4) Windows 版本（脚手架安装）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 已经有 node。没有 Node.js 则需要先装 Node.js</span></span><br><span class="line">sudo apt get npm  <span class="comment"># 安装 npm</span></span><br><span class="line">sudo npm install -g @vue/cli  <span class="comment"># 安装 Vue3 的脚手架</span></span><br><span class="line">vue create tool  <span class="comment"># 创建项目</span></span><br></pre></td></tr></table></figure><h4 id="5-其它"><a href="#5-其它" class="headerlink" title="(5) 其它"></a>(5) 其它</h4><ol><li>警告（Windows）：<code>npm WARN config global --global, --local are deprecated. Use --location=global instead.</code></li></ol><p>解决方法：使用管理员身份运行 PowerShell，运行 <code>npm-windows-upgrade</code>。</p><p><img src="/static/practices/vue3_warn.png" alt="npm WARN"></p><ol><li><p>查看 Vue 的版本：<code>npm list vue</code></p></li><li><p>npm 太慢</p></li></ol><p><a href="https://www.runoob.com/w3cnote/npm-slow-use-cnpm.html">解决方法</a>：使用淘宝镜像。</p><p><code>npm install -g cnpm --registry=https://registry.npmmirror.com</code></p><p>运行完上述命令后，即可使用 <code>cnpm</code> 替代 <code>npm</code>。</p><h2 id="2-必要的基础语言技能"><a href="#2-必要的基础语言技能" class="headerlink" title="2. 必要的基础语言技能"></a>2. 必要的基础语言技能</h2><p>前文已经述及，由于太久没有写过 HTML 等语言，我现在的相关技能已经退化至基本没有了，所以我进行必要的基础语言技能复建。</p><h3 id="2-1-JavaScript"><a href="#2-1-JavaScript" class="headerlink" title="2.1 JavaScript"></a>2.1 JavaScript</h3><p>在 Vue3 中，JavaScript 代码被包裹在标签 <code>&lt;script&gt;</code> 中。</p><h4 id="1-重要数据结构的基本方法"><a href="#1-重要数据结构的基本方法" class="headerlink" title="(1) 重要数据结构的基本方法"></a>(1) 重要数据结构的基本方法</h4><h5 id="1-Array"><a href="#1-Array" class="headerlink" title="1. Array"></a>1. <a href="https://www.w3school.com.cn/jsref/jsref_obj_array.asp">Array</a></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 初始化方法</span></span><br><span class="line"><span class="keyword">let</span> arr1 = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line"><span class="keyword">let</span> arr2 = [];</span><br><span class="line"><span class="keyword">let</span> arr3 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 添加元素 - push</span></span><br><span class="line">arr1.<span class="title function_">push</span>(<span class="number">1</span>);  <span class="comment">// 一次性添加一个元素</span></span><br><span class="line">arr1.<span class="title function_">push</span>(<span class="string">&#x27;aaa&#x27;</span>, <span class="string">&#x27;bbb&#x27;</span>);  <span class="comment">// 一次性添加多个元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 取出元素 - pop</span></span><br><span class="line"><span class="keyword">let</span> lastItem = arr1.<span class="title function_">pop</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 合并两个 Array 0 concat</span></span><br><span class="line">arr1 = arr1.<span class="title function_">concat</span>(arr2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 遍历</span></span><br><span class="line"><span class="comment">// 5.1. 传统 for 循环</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++)&#123; </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.2 item 为当前元素，index 为下标</span></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item, index</span>)&#123; </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item + <span class="string">&#x27;|&#x27;</span> + index);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.3 增强 for 循环，i 为下标</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> arr)&#123; </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> arr)&#123; </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 for 循环中，in 会找出 arr 的下标，of 会找出 arr 的所有元素。对于不可遍历的元素，就只能使用 in。</span></span><br></pre></td></tr></table></figure><h5 id="2-Dictionary"><a href="#2-Dictionary" class="headerlink" title="2. Dictionary"></a>2. <a href="https://pietschsoft.com/post/2015/09/05/javascript-basics-how-to-create-a-dictionary-with-keyvalue-pairs">Dictionary</a></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 初始化方法</span></span><br><span class="line"><span class="keyword">let</span> dict = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="keyword">let</span> dict = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 添加元素</span></span><br><span class="line">dict[<span class="string">&quot;one&quot;</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 遍历</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> dict) &#123;</span><br><span class="line">  <span class="keyword">let</span> value = dict[key];</span><br><span class="line">  <span class="comment">// do something with &quot;key&quot; and &quot;value&quot; variables</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 函数也可以是 key 或者 value，我觉得这个功能应该很好玩，但我还没试过。</span></span><br><span class="line"><span class="keyword">let</span> sleep = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Let us sleep!&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">dict[<span class="string">&#x27;rest&#x27;</span>] = sleep</span><br><span class="line">dict.<span class="title function_">rest</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="3-Set"><a href="#3-Set" class="headerlink" title="3. Set"></a>3. <a href="https://www.w3school.com.cn/js/js_object_sets.asp">Set</a></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 初始化方法</span></span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 添加元素 - add</span></span><br><span class="line">set.<span class="title function_">add</span>(<span class="number">1</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="4-Map"><a href="#4-Map" class="headerlink" title="4. Map"></a>4. <a href="https://www.w3school.com.cn/js/js_object_maps.asp">Map</a></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 暂时没有使用过，不做评价</span></span><br></pre></td></tr></table></figure><h4 id="2-代码调试小技巧"><a href="#2-代码调试小技巧" class="headerlink" title="(2) 代码调试小技巧"></a>(2) 代码调试小技巧</h4><p>当有不确定的代码时，可以先<strong>在浏览器的控制台直接输入代码</strong>，查看其效果。这样比较方便调试。</p><h4 id="3-JavaScript-动态生成-CSS"><a href="#3-JavaScript-动态生成-CSS" class="headerlink" title="(3) JavaScript 动态生成 CSS"></a>(3) JavaScript 动态生成 CSS</h4><p>以一段项目中的代码为例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">addCSS</span>(<span class="params">className, colorValue</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> dotClassName = <span class="string">&#x27;.&#x27;</span> + className</span><br><span class="line">  <span class="keyword">let</span> colorAttribute = <span class="string">&#x27;color: &#x27;</span> + colorValue + <span class="string">&#x27;;&#x27;</span></span><br><span class="line">  <span class="keyword">let</span> style = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;style&#x27;</span>);</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;head&#x27;</span>)[<span class="number">0</span>].<span class="title function_">appendChild</span>(style);</span><br><span class="line">  <span class="keyword">if</span>(!(style.<span class="property">sheet</span>||&#123;&#125;).<span class="property">insertRule</span>) </span><br><span class="line">    (style.<span class="property">styleSheet</span> || style.<span class="property">sheet</span>).<span class="title function_">addRule</span>(dotClassName, colorAttribute);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    style.<span class="property">sheet</span>.<span class="title function_">insertRule</span>(dotClassName + <span class="string">&quot;&#123;&quot;</span> + colorAttribute + <span class="string">&quot;&#125;&quot;</span>,<span class="number">0</span>);  </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>使用 <code>document.getElementsByTagName(&#39;head&#39;)</code> 获取页面中的 <code>head</code> 元素，然后在其后添加包含 CSS 代码的子节点。</p><h3 id="2-2-CSS"><a href="#2-2-CSS" class="headerlink" title="2.2 CSS"></a>2.2 CSS</h3><p>在 Vue3 中，CSS 代码被包裹在标签 <code>&lt;style&gt;</code> 中。</p><p>使用选择器获取页面元素。</p><h4 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a><a href="https://www.w3school.com.cn/css/css_selectors.asp">选择器</a></h4><ul><li>元素选择器根据元素名称来选择 HTML 元素。<code>p</code></li><li>id 选择器使用 HTML 元素的 id 属性来选择特定元素。<code>#id</code></li><li>类选择器选择有特定 class 属性的 HTML 元素。<code>.classname</code></li><li>通用选择器（<em>）选择页面上的所有的 HTML 元素。`</em>`</li><li>分组选择器选取所有具有相同样式定义的 HTML 元素。<code>p, h1, h2</code></li></ul><p>上述选择器是基础用法，我们可以使用逻辑组合伪类。比如元素的最后一个节点：<code>p:last-child</code>。类似的用法可以在用到的时候进行查询。</p><h3 id="2-3-HTML"><a href="#2-3-HTML" class="headerlink" title="2.3 HTML"></a>2.3 HTML</h3><p>在 Vue3 中，HTML 代码被包裹在标签 <code>&lt;template&gt;</code> 中。</p><h2 id="3-常见问题及解决方式"><a href="#3-常见问题及解决方式" class="headerlink" title="3. 常见问题及解决方式"></a>3. 常见问题及解决方式</h2><h3 id="3-1-不同组件传值"><a href="#3-1-不同组件传值" class="headerlink" title="3.1 不同组件传值"></a>3.1 不同组件传值</h3><h4 id="1-子组件向父组件传值-emit"><a href="#1-子组件向父组件传值-emit" class="headerlink" title="(1) 子组件向父组件传值: emit"></a>(1) 子组件向父组件传值: <strong>emit</strong></h4><p><code>App.vue</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;h1&gt;&#123;&#123; title &#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;Child @childVariableName=&quot;parentMethod($event)&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import Child from &quot;./components/Child&quot;</span><br><span class="line">  export default&#123;</span><br><span class="line">    name:&#x27;App&#x27;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      Child,</span><br><span class="line">    &#125;,</span><br><span class="line">    data()</span><br><span class="line">    &#123;</span><br><span class="line">      return&#123;</span><br><span class="line">        title:&#x27;Old Title&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      parentMethod(title)</span><br><span class="line">      &#123;</span><br><span class="line">        this.title = title;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p><p><code>Child.vue</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template lang=&quot;html&quot;&gt;</span><br><span class="line">  &lt;button type=&quot;button&quot; @click=&#x27;childMethod&#x27;&gt; Update me &lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name:&#x27;Child&#x27;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    childMethod()</span><br><span class="line">    &#123;</span><br><span class="line">      this.$emit(&#x27;childVariableName&#x27;, &#x27;New Title&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p><h4 id="2-子组件向父组件传递多个值"><a href="#2-子组件向父组件传递多个值" class="headerlink" title="(2) 子组件向父组件传递多个值"></a>(2) 子组件向父组件传递多个值</h4><p>将 <code>App.vue</code> 中的 <code>&lt;Child @childVariableName=&quot;parentMethod($event)&quot; /&gt;</code> 改为 <code>&lt;Child @childVariableName=&quot;parentMethod&quot; /&gt;</code>，将 <code>Child.vue</code> 中的 <code>this.$emit(&#39;childVariableName&#39;, &#39;New Title&#39;)</code> 改为 <code>this.$emit(&#39;changeTitle&#39;, data1, data2, ...)</code></p><h4 id="3-父组件向子组件传值-Props"><a href="#3-父组件向子组件传值-Props" class="headerlink" title="(3) 父组件向子组件传值: Props"></a>(3) 父组件向子组件传值: Props</h4><p><code>Parent.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;h1&gt;&#123;&#123; title &#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;Child childValue=&quot;This is parent value&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import Child from &quot;./components/Child&quot;</span><br><span class="line">  export default&#123;</span><br><span class="line">    name:&#x27;Parent&#x27;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      Child,</span><br><span class="line">    &#125;,</span><br><span class="line">    data()</span><br><span class="line">    &#123;</span><br><span class="line">      return&#123;</span><br><span class="line">        parentValue: &#x27;Parent Value&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>Child.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template lang=&quot;html&quot;&gt;</span><br><span class="line">  &#123;&#123; childValue &#125;&#125;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name:&#x27;Child&#x27;,</span><br><span class="line">  props: [&#x27;childValue&#x27;]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果所传的值是个变量，需要在变量前加冒号 <code>:</code></p><p><code>Parent.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;h1&gt;&#123;&#123; title &#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;Child :childValue=&quot;parentValue&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import Child from &quot;./components/Child&quot;</span><br><span class="line">  export default&#123;</span><br><span class="line">    name:&#x27;Parent&#x27;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      Child,</span><br><span class="line">    &#125;,</span><br><span class="line">    data()</span><br><span class="line">    &#123;</span><br><span class="line">      return&#123;</span><br><span class="line">        parentValue: &#x27;Parent Value&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>Child.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template lang=&quot;html&quot;&gt;</span><br><span class="line">  &#123;&#123; childValue &#125;&#125;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name:&#x27;Child&#x27;,</span><br><span class="line">  props: [&#x27;childValue&#x27;]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过 props 从父节点传递到子节点的数据值是不可更改的，因此如果想要对该数值进行修改等操作，需要通过重新定义一个新的变量来复制该数据，进而对新变量进行操作。</p><p><code>Child.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template lang=&quot;html&quot;&gt;</span><br><span class="line">  &#123;&#123; childValue &#125;&#125;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name:&#x27;Child&#x27;,</span><br><span class="line">  props: [&#x27;childValue&#x27;],</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      copiedChildValue: childValue</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    updateValue(newValue) &#123;</span><br><span class="line">      this.copiedChildValue = newValue</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-父子组件之间值的动态变化"><a href="#4-父子组件之间值的动态变化" class="headerlink" title="(4) 父子组件之间值的动态变化"></a>(4) 父子组件之间值的动态变化</h4><p>当子组件构建完毕后，父组件传递的值发生了变化，此时子组件是不会发生变化的。为了能让子组件相应父组件的变化，我们必须借助生命周期函数 <code>watch</code> 来监视该变量的变化。</p><p><code>Parent.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;h1&gt;&#123;&#123; title &#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;Child :childValue=&quot;parentValue&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import Child from &quot;./components/Child&quot;</span><br><span class="line">  export default&#123;</span><br><span class="line">    name:&#x27;Parent&#x27;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      Child,</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return&#123;</span><br><span class="line">        parentValue: &#x27;Parent Value&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>Child.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;template v-if=&#x27;showValue&#x27;&gt;</span><br><span class="line">  &#123;&#123; childValue &#125;&#125;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name:&#x27;Child&#x27;,</span><br><span class="line">  props: [&#x27;childValue&#x27;],</span><br><span class="line">  data() &#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      parentValue: &#x27;Parent Value&#x27;,</span><br><span class="line">      showValue: false,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  watch: &#123;</span><br><span class="line">    // 被监听的对象</span><br><span class="line">    childValue: &#123;</span><br><span class="line">      immediate: true,      </span><br><span class="line">      handler (newValue) &#123;</span><br><span class="line">        // 销毁当前组件</span><br><span class="line">        this.showValue = false</span><br><span class="line">        this.$nextTick(() =&gt; &#123;</span><br><span class="line">          this.parentValue = newValue</span><br><span class="line">          this.showValue = true</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5-非父子节点传值"><a href="#5-非父子节点传值" class="headerlink" title="(5) 非父子节点传值"></a>(5) 非父子节点传值</h4><p>我的做法是在两个组件的共同父组件中进行数值的转发。这样做的原因是这两个节点属于兄弟节点，它们的关系比较密切。实际上还有其他的官方发布的<a href="https://zhuanlan.zhihu.com/p/51001131">非父子组件间的传值方案</a>。</p><p>目前还没有尝试过。</p><h3 id="3-2-钩子函数"><a href="#3-2-钩子函数" class="headerlink" title="3.2 钩子函数"></a>3.2 钩子函数</h3><h4 id="关于-computed、methods、watch，mounted"><a href="#关于-computed、methods、watch，mounted" class="headerlink" title="关于 computed、methods、watch，mounted"></a>关于 computed、methods、watch，mounted</h4><p>区别见<a href="https://www.cnblogs.com/binmengxue/p/9958174.html">此处链接</a></p><ol><li>computed是在HTML DOM加载后马上执行的，如赋值；</li><li>methods则必须要有一定的触发条件才能执行，如点击事件；</li><li>watch呢？它用于观察Vue实例上的数据变动。对应一个对象，键是观察表达式，值是对应回调。值也可以是方法名，或者是对象，包含选项。所以他们的执行顺序为：默认加载的时候先computed再watch，不执行methods；等触发某一事件后，则是：先methods再watch。</li><li>mounted 是生命周期</li><li>created和mounted区别？</li></ol><h4 id="watch-同时监听多个值"><a href="#watch-同时监听多个值" class="headerlink" title="watch 同时监听多个值"></a>watch 同时监听多个值</h4><p>首先使用 computed 定义一个复合对象吧，然后再对该对象进行 watch。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  ...,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="title function_">propsVariables</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; val1, val2 &#125; = <span class="variable language_">this</span></span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        vall1,</span><br><span class="line">        val2</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="attr">propsVariables</span>: &#123;</span><br><span class="line">      <span class="attr">immediate</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">deep</span>: <span class="literal">true</span>,</span><br><span class="line">      handler (newValue) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(newValue.<span class="property">val1</span>, newValue.<span class="property">val2</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-ElementPlus-组件的属性、方法、事件、插槽及样式修改"><a href="#3-3-ElementPlus-组件的属性、方法、事件、插槽及样式修改" class="headerlink" title="3.3 ElementPlus 组件的属性、方法、事件、插槽及样式修改"></a>3.3 ElementPlus 组件的属性、方法、事件、插槽及样式修改</h3><p>这一部分可以重点关注官方文档。由于我在此次项目中重点使用了 <a href="https://element-plus.gitee.io/zh-CN/component/tree.html">Vue3 的树</a>，所以我以对 Vue3 的树进行样式修改为例。</p><h4 id="1-属性"><a href="#1-属性" class="headerlink" title="(1) 属性"></a>(1) 属性</h4><p>属性是指在 element 组件的基础上，在其元素上添加给定的属性，以提高其灵活性。</p><p>Tree 组件的属性节选如下：</p><p><img src="/static/practices/vue3_element_property.png" alt="Tree 组件的属性节选"></p><p>在构建树的时候，我们可以直接将常量或变量复制给特定的属性。<br>在下面的代码中，我给 Tree 组件传进去了包括 <code>data</code>、<code>empty-text</code>、<code>show-checkbox</code> 等值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div class=&quot;grid-content&quot; style=&quot;text-align: left&quot;&gt;</span><br><span class="line">      &lt;el-tree</span><br><span class="line">        v-if=&quot;showReady&quot;</span><br><span class="line">        :data=&quot;[treeHierarchy]&quot;</span><br><span class="line">        :ref=&quot;treeName&quot;</span><br><span class="line">        empty-text=&#x27;No Results&#x27;</span><br><span class="line">        show-checkbox</span><br><span class="line">        node-key=&quot;id&quot;</span><br><span class="line">        indent=&quot;25&quot;</span><br><span class="line">        default-expand-all</span><br><span class="line">        :default-checked-keys=&#x27;[rootId]&#x27;</span><br><span class="line">        :props=&quot;&#123;</span><br><span class="line">                  children: &#x27;children&#x27;,</span><br><span class="line">                  label: &#x27;name&#x27;,</span><br><span class="line">                  class: customNodeClass,</span><br><span class="line">                &#125;&quot;</span><br><span class="line">        @check-change=&quot;handleCheckChange&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;template v-slot:default=&quot;&#123; node &#125;&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;custom-node&quot; style=&#x27;word-wrap:break-word;&#x27; &gt;</span><br><span class="line">              &lt;!-- content --&gt;</span><br><span class="line">              &#123;&#123; node.label &#125;&#125;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">      &lt;/el-tree&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-方法"><a href="#2-方法" class="headerlink" title="(2) 方法"></a>(2) 方法</h4><p>Tree 组件的方法节选如下：</p><p><img src="/static/practices/vue3_tree_method.png" alt="Tree 组件的方法节选"></p><p>在使用 Tree 组件的时候，我们需要先获取 Tree 组件，在下面的代码里，我通过 ref 属性给 Tree 组件添加了一个名字，在 <code>methods</code> 中添加了一行代码 <code>let retNodes = this.$refs[&#39;treename&#39;].getCheckedNodes()</code> 以获取当前选中的节点数组。之所以可以调用 getCheckedNodes() 方法是因为在文档中清晰地告知了可以使用该方法。但是我一开始没有看明白文档中方法的使用方式，所以在查找资料上花费了很多时间。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-tree</span><br><span class="line">    :data=&quot;data&quot;</span><br><span class="line">    show-checkbox</span><br><span class="line">    ref=&#x27;treename&#x27;</span><br><span class="line">    node-key=&quot;id&quot;</span><br><span class="line">    :default-expanded-keys=&quot;[2, 3]&quot;</span><br><span class="line">    :default-checked-keys=&quot;[5]&quot;</span><br><span class="line">    :props=&quot;defaultProps&quot;</span><br><span class="line">  /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">  const defaultProps = &#123;</span><br><span class="line">    children: &#x27;children&#x27;,</span><br><span class="line">    label: &#x27;label&#x27;,</span><br><span class="line">  &#125;</span><br><span class="line">  const data = [</span><br><span class="line">    &#123;</span><br><span class="line">      id: 1,</span><br><span class="line">      label: &#x27;Level one 1&#x27;,</span><br><span class="line">      children: [</span><br><span class="line">        &#123;</span><br><span class="line">          id: 4,</span><br><span class="line">          label: &#x27;Level two 1-1&#x27;,</span><br><span class="line">          children: [</span><br><span class="line">            &#123;</span><br><span class="line">              id: 9,</span><br><span class="line">              label: &#x27;Level three 1-1-1&#x27;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              id: 10,</span><br><span class="line">              label: &#x27;Level three 1-1-2&#x27;,</span><br><span class="line">            &#125;,</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      id: 2,</span><br><span class="line">      label: &#x27;Level one 2&#x27;,</span><br><span class="line">      children: [</span><br><span class="line">        &#123;</span><br><span class="line">          id: 5,</span><br><span class="line">          label: &#x27;Level two 2-1&#x27;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: 6,</span><br><span class="line">          label: &#x27;Level two 2-2&#x27;,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      id: 3,</span><br><span class="line">      label: &#x27;Level one 3&#x27;,</span><br><span class="line">      children: [</span><br><span class="line">        &#123;</span><br><span class="line">          id: 7,</span><br><span class="line">          label: &#x27;Level two 3-1&#x27;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: 8,</span><br><span class="line">          label: &#x27;Level two 3-2&#x27;,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">  </span><br><span class="line">  export default: &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">      test() &#123;</span><br><span class="line">        let retNodes = this.$refs[&#x27;treename&#x27;].getCheckedNodes()</span><br><span class="line">        console.log(retNodes)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="3-事件"><a href="#3-事件" class="headerlink" title="(3) 事件"></a>(3) 事件</h4><p>Tree 组件的事情节选如下：</p><p><img src="/static/practices/vue3_tree_event.png" alt="Tree 组件的事情节选"></p><p>回调参数的意思是，如果我们调用事件，那我们就可以获得 Tree 组件包装的函数的返回值。以 check-change 函数为例，我们自定义一个函数 handleCheckChange，当复选框被点击的时候，handleCheckChange 函数就会被执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-tree</span><br><span class="line">    :data=&quot;data&quot;</span><br><span class="line">    show-checkbox</span><br><span class="line">    ref=&#x27;treename&#x27;</span><br><span class="line">    node-key=&quot;id&quot;</span><br><span class="line">    :default-expanded-keys=&quot;[2, 3]&quot;</span><br><span class="line">    :default-checked-keys=&quot;[5]&quot;</span><br><span class="line">    :props=&quot;defaultProps&quot;</span><br><span class="line">    @check-change=&quot;handleCheckChange&quot;</span><br><span class="line">  /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">  const defaultProps = &#123;</span><br><span class="line">    children: &#x27;children&#x27;,</span><br><span class="line">    label: &#x27;label&#x27;,</span><br><span class="line">  &#125;</span><br><span class="line">  const data = [</span><br><span class="line">    &#123;</span><br><span class="line">      id: 1,</span><br><span class="line">      label: &#x27;Level one 1&#x27;,</span><br><span class="line">      children: [</span><br><span class="line">        &#123;</span><br><span class="line">          id: 4,</span><br><span class="line">          label: &#x27;Level two 1-1&#x27;,</span><br><span class="line">          children: [</span><br><span class="line">            &#123;</span><br><span class="line">              id: 9,</span><br><span class="line">              label: &#x27;Level three 1-1-1&#x27;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              id: 10,</span><br><span class="line">              label: &#x27;Level three 1-1-2&#x27;,</span><br><span class="line">            &#125;,</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      id: 2,</span><br><span class="line">      label: &#x27;Level one 2&#x27;,</span><br><span class="line">      children: [</span><br><span class="line">        &#123;</span><br><span class="line">          id: 5,</span><br><span class="line">          label: &#x27;Level two 2-1&#x27;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: 6,</span><br><span class="line">          label: &#x27;Level two 2-2&#x27;,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      id: 3,</span><br><span class="line">      label: &#x27;Level one 3&#x27;,</span><br><span class="line">      children: [</span><br><span class="line">        &#123;</span><br><span class="line">          id: 7,</span><br><span class="line">          label: &#x27;Level two 3-1&#x27;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: 8,</span><br><span class="line">          label: &#x27;Level two 3-2&#x27;,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">  </span><br><span class="line">  export default: &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">      handleCheckChange(data1, data2) &#123;</span><br><span class="line">        console.log(data1, data2)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="4-插槽"><a href="#4-插槽" class="headerlink" title="(4) 插槽"></a>(4) 插槽</h4><p>ElementPlus 的插槽。仍旧以 Tree 组件为例，我想要修改树上每个节点的内容，那我就可以通过插槽对其样式进行修改。下面我决定将节点上的字变为红色。当然，我们也可以在 slot 中添加图标或任何其他想要的内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-tree</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-if</span>=<span class="string">&quot;showReady&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:data</span>=<span class="string">&quot;[treeHierarchy]&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:ref</span>=<span class="string">&quot;treeName&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">show-checkbox</span></span></span><br><span class="line"><span class="tag">  <span class="attr">node-key</span>=<span class="string">&quot;id&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">default-expand-all</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:default-checked-keys</span>=<span class="string">&#x27;[rootId]&#x27;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:props</span>=<span class="string">&quot;&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">            children: &#x27;children&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">            label: &#x27;name&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">            class: customNodeClass,</span></span></span><br><span class="line"><span class="string"><span class="tag">          &#125;&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">check-change</span>=<span class="string">&quot;handleCheckChange&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>=<span class="string">&quot;&#123; node &#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;template #default=&quot;scope&quot;&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">element-tree-line</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:node</span>=<span class="string">&quot;node&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:showLabelLine</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">indent</span>=<span class="string">&quot;25&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;custom-node&quot;</span> <span class="attr">style</span>=<span class="string">&#x27;word-wrap:break-word;&#x27;</span> &gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- content --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">color</span>=<span class="string">&#x27;red&#x27;</span>&gt;</span>&#123;&#123; node.label &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">element-tree-line</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-tree</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>v-slot</code> 就是我们放进去的插槽。其实，<code>v-slot</code> 是 Vue2 的写法，Vue3 的新写法是 <code>&lt;template #default=&quot;scope&quot;&gt;</code>。</p><h4 id="5-CSS-修改"><a href="#5-CSS-修改" class="headerlink" title="(5) CSS 修改"></a>(5) CSS 修改</h4><p>对于给定的组件，我们经常需要对其进行修改。因为官方的组件虽然做了很多基础的工作，但也给了很多限制。对 CSS 的样式进行修改这一部分内容我们需要知晓如下两种情况。</p><h5 id="1-CSS-添加-class"><a href="#1-CSS-添加-class" class="headerlink" title="1. CSS 添加 class"></a>1. CSS 添加 class</h5><p>以 Tree 组件为例，我在 props 里为其添加了 class。</p><p><img src="/static/practices/vue3_tree_props.png" alt="element_tree_class"></p><p>在 class 中，如果有 <code>no-check-node</code>，节点就不会显示复选框。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;grid-content&quot; style=&quot;text-align: left&quot;&gt;</span><br><span class="line">    &lt;el-tree</span><br><span class="line">      :data=&quot;[treeHierarchy]&quot;</span><br><span class="line">      :ref=&quot;treeName&quot;</span><br><span class="line">      empty-text=&#x27;No Results&#x27;</span><br><span class="line">      show-checkbox</span><br><span class="line">      node-key=&quot;id&quot;</span><br><span class="line">      default-expand-all</span><br><span class="line">      :default-checked-keys=&#x27;[rootId]&#x27;</span><br><span class="line">      :props=&quot;&#123;</span><br><span class="line">                children: &#x27;children&#x27;,</span><br><span class="line">                label: &#x27;name&#x27;,</span><br><span class="line">                class: customNodeClass,</span><br><span class="line">              &#125;&quot;</span><br><span class="line">      @check-change=&quot;handleCheckChange&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">// 给节点添加class</span><br><span class="line">const customNodeClass = (data) =&gt; &#123;</span><br><span class="line">  let ret = data.colorClass</span><br><span class="line">  // 针对描述型的节点不显示其复选框</span><br><span class="line">  if (undefined === nodeType || nodeType !== &#x27;Notion&#x27;) &#123;</span><br><span class="line">    ret += &#x27; no-checkbox-node&#x27;;</span><br><span class="line">  &#125;</span><br><span class="line">  return ret;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;MyTree&#x27;,</span><br><span class="line">  components: &#123; ElementTreeLine: getElementLabelLine(h) &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    &#x27;treeHierarchy&#x27;: &#123;</span><br><span class="line">      require: true</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x27;treeName&#x27;: &#123;</span><br><span class="line">      require: true</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x27;rootId&#x27;: &#123;</span><br><span class="line">      require: true</span><br><span class="line">    &#125;, </span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      customNodeClass,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>除了借助已有的 class 外，我们也可以自己新建 class，添加至 HTML 元素上，然后编写 CSS 代码对元素的表现形式进行控制。</p><h5 id="2-less-和-sass"><a href="#2-less-和-sass" class="headerlink" title="2. less 和 sass"></a>2. less 和 sass</h5><p>在查找 Vue3 和 ElementPlus 的资料时，搜索引擎给了我许多 Vue2 和 ElementUI 的资料，有一部分不可以使用在新版本上，但是还有一部分是可以类推到新版本上。其中，许多样式的修改使用到了 <code>less</code>。使用 <code>less</code> 之前需要先下载 <code>less-loader</code> 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev less-loader less</span><br></pre></td></tr></table></figure><p>在开发完成后，我们需要将 less 代码转换为 CSS。</p><blockquote><p>首先sass和less都是css的预编译处理语言，他们引入了mixins，参数，嵌套规则，运算，颜色，名字空间，作用域，JavaScript赋值等 加快了css开发效率,当然这两者都可以配合gulp和grunt等前端构建工具使用</p><p>sass和less主要区别:在于实现方式 less是基于JavaScript的在客户端处理 所以安装的时候用npm，sass是基于ruby所以在服务器处理。</p><p>很多开发者不会选择LESS因为JavaScript引擎需要额外的时间来处理代码然后输出修改过的CSS到浏览器。关于这个有很多种方式，我选择的是只在开发环节使用LESS。一旦我完成了开发，我就复制然后粘贴LESS输出的到一个压缩器，然后到一个单独的CSS文件来替代LESS文件。另一个选择是使用LESS.app来编译和压缩你的LESS文件。两个选择都将最小化你的样式输出，从而避免由于用户的浏览器不支持JavaScript而可能引起的任何问题。尽管这不大可能，但终归是有可能的。<br>摘自 <a href="https://www.jianshu.com/p/e3f1fcbbccc3">LESS与SASS的区别</a></p></blockquote><h3 id="3-4-工具"><a href="#3-4-工具" class="headerlink" title="3.4 工具"></a>3.4 工具</h3><h4 id="前端展示的代码高亮工具"><a href="#前端展示的代码高亮工具" class="headerlink" title="前端展示的代码高亮工具"></a>前端展示的代码高亮工具</h4><p>选择了 <code>Prism.js</code>。详细解释见如下两个链接：<a href="http://prismjs.com/index.html">Prism.js 官网链接</a>、<a href="https://segmentfault.com/a/1190000009122617">Prism.js 简单使用文档</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">todo: 如何下载</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">pre</span> <span class="attr">class</span>=<span class="string">&quot;language-java&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">code</span> <span class="attr">class</span>=<span class="string">&quot;language-java&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>&#123;&#123; code &#125;&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">code</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span></span><br><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">import Prism <span class="selector-tag">from</span> &quot;prismjs&quot;;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">Prism<span class="selector-class">.highlightAll</span>()</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="3-5-报错与特定功能实现"><a href="#3-5-报错与特定功能实现" class="headerlink" title="3.5 报错与特定功能实现"></a>3.5 报错与特定功能实现</h3><h4 id="1-Vue3-文件导入-JavaScript-文件的值"><a href="#1-Vue3-文件导入-JavaScript-文件的值" class="headerlink" title="(1) Vue3 文件导入 JavaScript 文件的值"></a>(1) Vue3 文件导入 JavaScript 文件的值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; importedVariable &#125; <span class="keyword">from</span> <span class="string">&#x27;data&#x27;</span></span><br></pre></td></tr></table></figure><p>千万不可以少两个花括号 <code>import variable from &#39;data&#39;</code>，不然无法识别。</p><p>上面的代码生效的前提是，只有在 <code>data.js</code> 中有默认导出的 <code>export default</code> 语法时才会生效。也就是说，<code>data.js</code> 中有如下代码:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> importedVariable = <span class="string">&#x27;importedVariable&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  importedVariable</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-export-default-和-export-的区别"><a href="#2-export-default-和-export-的区别" class="headerlink" title="(2) export default 和 export 的区别"></a>(2) <code>export default</code> 和 <code>export</code> 的区别</h4><h5 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h5><p>export 和 export default 实现的功能相同，即：可用于导出（暴露）常量、函数、文件、模块等，以便其他文件调用。</p><h5 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h5><p>1、export 导出多个对象，export default 只能导出一个对象</p><p>2、export 导出对象需要用 { }，export default 不需要 { }，如：</p><p>export { A,B,C };</p><p>export default A;</p><p>3、在其他文件引用 export default 导出的对象时不一定使用导出时的名字。因为这种方式实际上是将该导出对象设置为默认导出对象，如：</p><p>假设文件 A、B 在同级目录，实现文件 B 引入文件 A 的导出对象 deObject：</p><p>文件 A：export default deObject</p><p>文件 B：import deObject from ‘./A’</p><p>或者：</p><p>import newDeObject from ‘./A’</p><h4 id="3-Vue3-无法正常显示图标-el-icon"><a href="#3-Vue3-无法正常显示图标-el-icon" class="headerlink" title="(3) Vue3 无法正常显示图标 el-icon"></a>(3) Vue3 无法正常显示图标 el-icon</h4><p>我首先通过 npm 全局导入 element-icon（<a href="https://element-plus.org/en-US/component/icon.html#using-packaging-manager">icon 导入方式</a>），运行命令 <code>npm install @element-plus/icons-vue</code> ，图标不显示。<br>随后我尝试将 icon 组件导入需要使用该 icon 的文件，图标仍然不显示。<br>最后我将图标的 svg 复制下来，最终才正常显示 el-icon。</p><p>在 <a href="https://element-plus.org/en-US/component/icon.html#icon-collection">icon 的代码复制界面</a> 选择“Copy svg content”，即可复制该代码的 svg 值，随后我们将其复制在我们需要的 HTML 代码中。</p><h4 id="4-Vue3-不显示-element-tree"><a href="#4-Vue3-不显示-element-tree" class="headerlink" title="(4) Vue3 不显示 element-tree"></a>(4) Vue3 不显示 element-tree</h4><p>原因一：<br>在 <code>&lt;style&gt;</code> 下使用了 methods 中的方法，导致找不到方法，所以 el-tree 无法显示。</p><p>原因二：传进去的 data 不是 list<br>报错： <code>Uncaught (in promise) TypeError: children.indexOf is not a function</code>。<br>解决方法：在传入的 data 中添加一个 [] </p><h4 id="5-Vue3-文件中定义了两个同名全局变量"><a href="#5-Vue3-文件中定义了两个同名全局变量" class="headerlink" title="(5) Vue3 文件中定义了两个同名全局变量"></a>(5) Vue3 文件中定义了两个同名全局变量</h4><p>报错：<code>error Duplicated key</code>，详见<a href="https://eslint.vuejs.org/rules/no-dupe-keys.html">解释</a>。<br>解决方法：将两个同名变量修改为不同名称。</p><h4 id="6-设置全部节点默认选中"><a href="#6-设置全部节点默认选中" class="headerlink" title="(6) 设置全部节点默认选中"></a>(6) 设置全部节点默认选中</h4><p>实际上仅需设置选中根节点。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:default-checked-keys=&#x27;[rootId]&#x27;</span><br></pre></td></tr></table></figure><p>在 Tree 组件中添加属性 <code>default-checked-keys</code>，<code>rootId</code> 是一个变量，表示根节点。</p><h4 id="7-控制链接的大小和颜色"><a href="#7-控制链接的大小和颜色" class="headerlink" title="(7) 控制链接的大小和颜色"></a>(7) 控制链接的大小和颜色</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: inherit;  <span class="comment">/* 继承父节点的颜色 */</span> </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>, <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;  <span class="comment">/*超链接无下划线*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: underline;  <span class="comment">/*鼠标放上去有下划线*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-在-Tree-组件上添加虚线"><a href="#8-在-Tree-组件上添加虚线" class="headerlink" title="(8) 在 Tree 组件上添加虚线"></a>(8) 在 Tree 组件上添加虚线</h4><p>安装网友写的<a href="https://npm.io/package/element-plus-tree-line">插件</a> <code>element-tree-line</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;el-tree</span><br><span class="line">        :data=&quot;data&quot;</span><br><span class="line">        show-checkbox</span><br><span class="line">        node-key=&quot;id&quot;</span><br><span class="line">        draggable</span><br><span class="line">        :default-expanded-keys=&quot;[2, 3]&quot;</span><br><span class="line">        :default-checked-keys=&quot;[5]&quot;</span><br><span class="line">        :props=&quot;defaultProps&quot;</span><br><span class="line">        :indent=&quot;treeIndent&quot;</span><br><span class="line">        &gt;&lt;template v-slot:default=&quot;&#123; node &#125;&quot;&gt;</span><br><span class="line">            &lt;element-tree-line</span><br><span class="line">                :node=&quot;node&quot;</span><br><span class="line">                :indent=&quot;treeIndent&quot;</span><br><span class="line">            &gt;</span><br><span class="line">                &lt;template v-slot:node-label&gt;</span><br><span class="line">                    &lt;span style=&quot;font-size: 12px&quot;&gt;</span><br><span class="line">                        &#123;&#123; node.label &#125;&#125;</span><br><span class="line">                    &lt;/span&gt;</span><br><span class="line">                &lt;/template&gt;</span><br><span class="line">            &lt;/element-tree-line&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">    &lt;/el-tree&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import &#123; getElementLabelLine &#125; from &#x27;element-tree-line&#x27;;</span><br><span class="line">    import &#x27;element-tree-line/dist/style.css&#x27;;</span><br><span class="line">    import &#123; h &#125; from &#x27;vue&#x27;;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &#x27;App&#x27;,</span><br><span class="line">        components: &#123; ElementTreeLine: getElementLabelLine(h) &#125;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                treeIndent: 30,</span><br><span class="line">                data: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        id: 1,</span><br><span class="line">                        label: &#x27;Level one 1&#x27;,</span><br><span class="line">                        children: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                id: 4,</span><br><span class="line">                                label: &#x27;Level two 1-1&#x27;,</span><br><span class="line">                                children: [</span><br><span class="line">                                    &#123;</span><br><span class="line">                                        id: 9,</span><br><span class="line">                                        label: &#x27;Level three 1-1-1&#x27;,</span><br><span class="line">                                    &#125;,</span><br><span class="line">                                    &#123;</span><br><span class="line">                                        id: 10,</span><br><span class="line">                                        label: &#x27;Level three 1-1-2&#x27;,</span><br><span class="line">                                    &#125;,</span><br><span class="line">                                ],</span><br><span class="line">                            &#125;,</span><br><span class="line">                        ],</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        id: 2,</span><br><span class="line">                        label: &#x27;Level one 2&#x27;,</span><br><span class="line">                        children: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                id: 5,</span><br><span class="line">                                label: &#x27;Level two 2-1&#x27;,</span><br><span class="line">                            &#125;,</span><br><span class="line">                            &#123;</span><br><span class="line">                                id: 6,</span><br><span class="line">                                label: &#x27;Level two 2-2&#x27;,</span><br><span class="line">                            &#125;,</span><br><span class="line">                        ],</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        id: 3,</span><br><span class="line">                        label: &#x27;Level one 3&#x27;,</span><br><span class="line">                        children: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                id: 7,</span><br><span class="line">                                label: &#x27;Level two 3-1&#x27;,</span><br><span class="line">                            &#125;,</span><br><span class="line">                            &#123;</span><br><span class="line">                                id: 8,</span><br><span class="line">                                label: &#x27;Level two 3-2&#x27;,</span><br><span class="line">                            &#125;,</span><br><span class="line">                        ],</span><br><span class="line">                    &#125;,</span><br><span class="line">                ],</span><br><span class="line">                defaultProps: &#123;</span><br><span class="line">                    children: &#x27;children&#x27;,</span><br><span class="line">                    label: &#x27;label&#x27;,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.element-tree-node-line-hor &#123;</span><br><span class="line">  border-bottom: 1px dashed #409eff;</span><br><span class="line">&#125;</span><br><span class="line">.element-tree-node-line-ver &#123;</span><br><span class="line">  border-left: 1px dashed #409eff;</span><br><span class="line">&#125;</span><br><span class="line">.element-tree-node-line-ver.last-node-line &#123;</span><br><span class="line">  border-left: 1px dashed transparent;</span><br><span class="line">&#125;</span><br><span class="line">.element-tree-node-line-ver.last-node-isLeaf-line &#123;</span><br><span class="line">  height: 50%;</span><br><span class="line">&#125;</span><br><span class="line">.element-tree-node-label-line &#123;</span><br><span class="line">  border: 0px;</span><br><span class="line">&#125;</span><br><span class="line">.el-tree-node__expand-icon &#123;</span><br><span class="line">  color: #409eff</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上述代码效果图如下：</p><p><img src="/static/practices/vue3_element_line.png" alt="element-tree-line"></p><h4 id="9-元素和页面一样高"><a href="#9-元素和页面一样高" class="headerlink" title="(9) 元素和页面一样高"></a>(9) 元素和页面一样高</h4><p>使用 <code>height=&#39;100vh&#39;</code>。</p>]]></content>
    
    
    <summary type="html">本文记录了使用 Vue3 + ElementPlus 开发论文中前端工具的具体过程。</summary>
    
    
    
    <category term="技术" scheme="https://luorongluorong.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="论文" scheme="https://luorongluorong.github.io/tags/%E8%AE%BA%E6%96%87/"/>
    
    <category term="练习" scheme="https://luorongluorong.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
    <category term="原创" scheme="https://luorongluorong.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
    <category term="前端" scheme="https://luorongluorong.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="vue3" scheme="https://luorongluorong.github.io/tags/vue3/"/>
    
  </entry>
  
  <entry>
    <title>FastJson 和 Gson 针对复杂对象的序列化与反序列化——以 Java 为例</title>
    <link href="https://luorongluorong.github.io/2022/03/07/practices/fastjson_gson/"/>
    <id>https://luorongluorong.github.io/2022/03/07/practices/fastjson_gson/</id>
    <published>2022-03-07T03:20:19.000Z</published>
    <updated>2023-03-31T15:30:34.676Z</updated>
    
    <content type="html"><![CDATA[<p>FastJson 和 Gson 都是 Java 中用于处理 JSON 字符串和对象之间转换的库。</p><p>FastJson 的优点是轻量级，速度快，支持泛型和注解。</p><p>Gson 的优点是功能强大，精确度高，无依赖，支持复杂类型的转换。</p><!-- 我个人认为，如果不追求性能的话，使用 Gson 无疑是不二选择。因为 FastJson 有许多潜规则，比如必须存在无参构造方法、属性必须有 Getter 和 Setter 方法。 --><h1 id="使用-FastJson"><a href="#使用-FastJson" class="headerlink" title="使用 FastJson"></a>使用 FastJson</h1><p>FastJson 是阿里巴巴团队发布的，它可以解析JSON格式的字符串，支持将Java Bean序列化为JSON字符串，也可以从JSON字符串反序列化到JavaBean。</p><p>fastjson 虽然效率高，但如果没有仔细通读说明文档而直接使用的话，容易踩入一些坑中：</p><ul><li><p>被序列化/反序列化的类，每一个属性都需要带getter/setter.并且不能在方法体内写特殊的逻辑。按照标准生成public的getter、setter，严禁添加其他带get、set开头的public方法</p></li><li><p>fastjson会反射获取类的构造函数，如果没有无参构造函数，就可能会调用其他构造函数，相当于自动为对象进行初始化，造成数据混乱现象，解决方法为：添加一个无参空构造函数</p></li></ul><p>要使用 FastJson，你需要在 Maven 项目中添加 FastJson 依赖。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.73&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 FastJson 将 Person 对象转换为 JSON 字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">jsonStr1</span> <span class="operator">=</span> JSON.toJSONString(person);</span><br><span class="line">System.out.println(<span class="string">&quot;使用 FastJson 转换后的结果：&quot;</span> + jsonStr1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 FastJson 将 JSON 字符串转换为 Person 对象</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span> JSON.parseObject(jsonStr1, Person.class);</span><br><span class="line">System.out.println(<span class="string">&quot;使用 FastJson 转换后的对象：&quot;</span> + person1.getName() + <span class="string">&quot;, &quot;</span> + person1.getAge());</span><br></pre></td></tr></table></figure><h1 id="使用-Gson"><a href="#使用-Gson" class="headerlink" title="使用 Gson"></a>使用 Gson</h1><p>GSON 是一个开源的 Java 库，可以将 Java 对象转换为 JSON 格式，也可以将 JSON 字符串转换为 Java 对象。</p><p>要使用 GSON，你需要在 Maven 项目中添加 GSON 依赖。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;gson&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.8.9&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个 Gson 对象</span></span><br><span class="line"><span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line"><span class="comment">// 使用 Gson 将 Person 对象转换为 JSON 字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">jsonStr2</span> <span class="operator">=</span> gson.toJson(person);</span><br><span class="line">System.out.println(<span class="string">&quot;使用 Gson 转换后的结果：&quot;</span> + jsonStr2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 Gson 将 JSON 字符串转换为 Person 对象</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">person2</span> <span class="operator">=</span> gson.fromJson(jsonStr2, Person.class);</span><br><span class="line">System.out.println(<span class="string">&quot;使用 Gson 转换后的对象：&quot;</span> + person2.getName() + <span class="string">&quot;, &quot;</span> + person2.getAge());</span><br></pre></td></tr></table></figure><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>新建一个被测试的对象类 TestObj 和 propertyClass。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TestObj</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* fastJson ，必须保证对象的属性都有 Getter 和 Setter */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestObj</span> &#123;</span><br><span class="line">    <span class="type">int</span> propertyInt;</span><br><span class="line">    String propertyString;</span><br><span class="line">    List&lt;String&gt; propertyList;</span><br><span class="line">    Map&lt;String, List&lt;Integer&gt;&gt; propertyMap;</span><br><span class="line">    PropertyClass propertyClass;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* fastJson 使用 parseObject 函数时，必须保证对象有无参构造方法 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestObj</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestObj</span><span class="params">(<span class="type">int</span> pi, String ps)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.propertyInt = pi;</span><br><span class="line">        <span class="built_in">this</span>.propertyString = ps;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestObj</span><span class="params">(<span class="type">int</span> pi, String ps, List&lt;String&gt; pl, Map&lt;String, List&lt;Integer&gt;&gt; pm, PropertyClass pc)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(pi, ps);</span><br><span class="line">        <span class="built_in">this</span>.propertyList = pl;</span><br><span class="line">        <span class="built_in">this</span>.propertyMap = pm;</span><br><span class="line">        <span class="built_in">this</span>.propertyClass = pc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PropertyClass</span></span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* fastJson ，必须保证对象的属性都有 Getter 和 Setter */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PropertyClass</span> &#123;</span><br><span class="line">    <span class="type">double</span> subDouble;</span><br><span class="line">    String subStr;</span><br><span class="line">    Map&lt;Integer, String&gt; subMap;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* fastJson 使用 parseObject 函数时，必须保证对象有无参构造方法 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PropertyClass</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PropertyClass</span><span class="params">(<span class="type">double</span> subDouble, String subStr, Map&lt;Integer, String&gt; subMap)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.subDouble = subDouble;</span><br><span class="line">        <span class="built_in">this</span>.subStr = subStr;</span><br><span class="line">        <span class="built_in">this</span>.subMap = subMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>使用 Main 对 Gson 和 FastJson 进行测试。</p><p>如下代码的解释：</p><p>FastJson 测试</p><ul><li>首先新建一个 TestObj 类的对象，</li><li>然后使用 FastJson 存储到文件 output/fastjson.json 中，</li><li>使用 FastJson 读取 output/gson.json，并将得到的 TestObj 类对象存储到 output/fastjsonRead.json 中</li></ul><p>Gson 测试</p><ul><li>首先新建一个 TestObj 类的对象，</li><li>然后使用 Gson 存储到文件 output/gson.json 中，</li><li>使用 Gson 读取 output/gson.json，并将得到的 TestObj 类对象存储到 output/gsonRead.json 中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Main</span> <span class="variable">main</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Main</span>();</span><br><span class="line">        <span class="comment">// 测试 Gson</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Test Gson&quot;</span>);</span><br><span class="line">        main.testGsonWrite();</span><br><span class="line">        main.testGsonRead();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试 FastJson</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Test FastJson&quot;</span>);</span><br><span class="line">        main.testFastJsonWrite();</span><br><span class="line">        main.testFastJsonRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -- 测试 FastJson ---</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFastJsonWrite</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">TestObj</span> <span class="variable">testObj</span> <span class="operator">=</span> getTestObj();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Convert the object to JSON string</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> JSON.toJSONString(testObj);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Write the JSON string to a file</span></span><br><span class="line">            <span class="type">FileWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;output/fastjson.json&quot;</span>);</span><br><span class="line">            writer.write(jsonString);</span><br><span class="line">            writer.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFastJsonRead</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// Convert the JSON string back to object</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">// 从文件中读取JSON字符串</span></span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileReader = <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;output/fastjson.json&quot;</span>);</span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(fileReader);</span><br><span class="line">            jsonString = bufferedReader.readLine();</span><br><span class="line">            bufferedReader.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Convert the JSON String to object</span></span><br><span class="line">        <span class="type">TestObj</span> <span class="variable">testObj</span> <span class="operator">=</span> JSON.parseObject(jsonString, TestObj.class);</span><br><span class="line">        testReadObj(testObj);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read the fastjsonRead.json using BufferedReader</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">FileWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;output/fastjsonRead.json&quot;</span>);</span><br><span class="line">            writer.write(jsonString);</span><br><span class="line">            writer.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -- 测试 Gson ---</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGsonWrite</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">TestObj</span> <span class="variable">testObj</span> <span class="operator">=</span> getTestObj();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create a Gson object</span></span><br><span class="line">        <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Write the JSON string to a file</span></span><br><span class="line">            <span class="type">FileWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;output/gson.json&quot;</span>);</span><br><span class="line">            gson.toJson(testObj, writer);</span><br><span class="line">            writer.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGsonRead</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 使用对象模型，将 JSON 字符串或文件转换为 Java 对象或集合12。</span></span><br><span class="line">        <span class="comment">// 这种方法需要你提前定义好与 JSON 结构对应的 Java 类，</span></span><br><span class="line">        <span class="comment">// 然后使用 Gson 的 fromJson 方法来进行转换。</span></span><br><span class="line">        <span class="comment">// Create a new Gson object</span></span><br><span class="line">        <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read the gson.json using BufferedReader</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;output/gson.json&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Convert the JSON String to object</span></span><br><span class="line">            <span class="type">TestObj</span> <span class="variable">testObj</span> <span class="operator">=</span> gson.fromJson(br, TestObj.class);</span><br><span class="line"></span><br><span class="line">            testReadObj(testObj);</span><br><span class="line"></span><br><span class="line">            <span class="type">FileWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;output/gsonRead.json&quot;</span>);</span><br><span class="line">            gson.toJson(testObj, writer);</span><br><span class="line">            writer.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// -- 工具方法 ---</span></span><br><span class="line">    <span class="keyword">private</span> TestObj <span class="title function_">getTestObj</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 构建 TestObj 对象</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">propertyInt</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">propertyString</span> <span class="operator">=</span> <span class="string">&quot;gj1&quot;</span>;</span><br><span class="line">        List&lt;String&gt; propertyList = List.of(<span class="string">&quot;gjitem1&quot;</span>, <span class="string">&quot;gjitem2&quot;</span>, <span class="string">&quot;gjitem3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, List&lt;Integer&gt;&gt; propertyMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; mapitem1 = List.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">        List&lt;Integer&gt; mapitem2 = List.of(<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line">        propertyMap.put(<span class="string">&quot;233&quot;</span>, mapitem1);</span><br><span class="line">        propertyMap.put(<span class="string">&quot;234&quot;</span>, mapitem2);</span><br><span class="line"></span><br><span class="line">        Map&lt;Integer, String&gt; subMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        subMap.put(<span class="number">0</span>, <span class="string">&quot;好好学习&quot;</span>);</span><br><span class="line">        subMap.put(<span class="number">1</span>, <span class="string">&quot;天天向上&quot;</span>);</span><br><span class="line">        <span class="type">PropertyClass</span> <span class="variable">propertyClass</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PropertyClass</span>(<span class="number">2.33</span>, <span class="string">&quot;substring&quot;</span>, subMap);</span><br><span class="line"></span><br><span class="line">        <span class="type">TestObj</span> <span class="variable">testObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestObj</span>(propertyInt, propertyString, propertyList, propertyMap, propertyClass);</span><br><span class="line">        <span class="keyword">return</span> testObj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">testReadObj</span><span class="params">(TestObj testObj)</span> &#123;</span><br><span class="line">        System.out.println(testObj.propertyInt == <span class="number">1</span>);</span><br><span class="line">        System.out.println(testObj.propertyList.get(<span class="number">0</span>).equals(<span class="string">&quot;gjitem1&quot;</span>));</span><br><span class="line">        System.out.println(testObj.propertyClass.subStr.equals(<span class="string">&quot;substring&quot;</span>));</span><br><span class="line">        System.out.println(testObj.propertyClass.subMap.get(<span class="number">0</span>).equals(<span class="string">&quot;好好学习&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到的 <code>output/gson.json</code> 和 <code>output/gsonRead.json</code> 如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;propertyInt&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;propertyString&quot;</span><span class="punctuation">:</span><span class="string">&quot;gj1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;propertyList&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;gjitem1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;gjitem2&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;gjitem3&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;propertyMap&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;233&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">            <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">            <span class="number">3</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;234&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">            <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">            <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">            <span class="number">1</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;propertyClass&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;subDouble&quot;</span><span class="punctuation">:</span><span class="number">2.33</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;subStr&quot;</span><span class="punctuation">:</span><span class="string">&quot;substring&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;subMap&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;0&quot;</span><span class="punctuation">:</span><span class="string">&quot;好好学习&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;1&quot;</span><span class="punctuation">:</span><span class="string">&quot;天天向上&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></p><p>得到的 <code>output/fastjson.json</code> 和 <code>output/fastjsonRead.json</code> 如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;propertyClass&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;subDouble&quot;</span><span class="punctuation">:</span><span class="number">2.33</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;subMap&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="number">0</span><span class="punctuation">:</span><span class="string">&quot;好好学习&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="number">1</span><span class="punctuation">:</span><span class="string">&quot;天天向上&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;subStr&quot;</span><span class="punctuation">:</span><span class="string">&quot;substring&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;propertyInt&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;propertyList&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;gjitem1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;gjitem2&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;gjitem3&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;propertyMap&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;233&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">            <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">            <span class="number">3</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;234&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">            <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">            <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">            <span class="number">1</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;propertyString&quot;</span><span class="punctuation">:</span><span class="string">&quot;gj1&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></p><p>测试结果：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Test Gson</span><br><span class="line">true</span><br><span class="line">true</span><br><span class="line">true</span><br><span class="line">true</span><br><span class="line">Test FastJson</span><br><span class="line">true</span><br><span class="line">true</span><br><span class="line">true</span><br><span class="line">true</span><br></pre></td></tr></table></figure><br>测试成功！</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.jianshu.com/p/0207cea28812">FastJson使用注意事项</a></li></ul><h1 id="待阅读文章"><a href="#待阅读文章" class="headerlink" title="待阅读文章"></a>待阅读文章</h1><ul><li><a href="https://juejin.cn/post/6971610120740569096">浅谈Gson和fastjson使用中的坑</a></li></ul>]]></content>
    
    
    <summary type="html">记录 Java 序列化和反序列化。</summary>
    
    
    
    <category term="技术" scheme="https://luorongluorong.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="JSON" scheme="https://luorongluorong.github.io/tags/JSON/"/>
    
    <category term="Gson" scheme="https://luorongluorong.github.io/tags/Gson/"/>
    
    <category term="FastJson" scheme="https://luorongluorong.github.io/tags/FastJson/"/>
    
    <category term="Java" scheme="https://luorongluorong.github.io/tags/Java/"/>
    
    <category term="原创" scheme="https://luorongluorong.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
</feed>
